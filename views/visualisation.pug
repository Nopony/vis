extends layout
block content
	.row.main-row
		.col.s3.vis-details.z-depth-1(style='padding-left: 0')
			.row
				.card
					.card-content.white-text
						span.card-title=lang.vis_titles[visname]
						p=lang.vis_details[visname]

			.row(style='padding-left: 10px;')
				button.btn(onclick='genPdfDoc()')=lang.generate_pdf
			if (visname === 'collab')
				.row(style='padding-left: 10px')
					button#toggleView.btn(onclick='showEdits()')=lang.editorial_view

		.col.s9.svg-container
			svg#svg-port.z-depth-1.svg-port
block append scripts
	//if(Array.isArray(additionalIncludes))
	//	for address in additionalIncludes
	//		script(src=address)
	script(src='/js/visualisations/' + visname + '.js')
	script(type='text/javascript').
		var jsStrings = !{JSON.stringify(lang.scriptable)};
		var visname = !{JSON.stringify(visname)};
		var authorName = !{JSON.stringify(name)};
		function genPdfDoc() {
			genPdfDocArgs(jsStrings.vis_titles[visname],
			jsStrings.pdf_caption,
			jsStrings.pdf_caption_title,
			jsStrings.for,
			authorName,
			'landscape')
		}

		function genPdfDocArgs(title, made_with, visualiser_name, made_for, author_name, orientation) {
			var $svg = document.querySelector('#svg-port')
				, doc = new PDFDocument({
				layout: orientation || 'landscape',
			})
				, stream = doc.pipe(blobStream());

			var loadFont = function (name, type, url, ff) {
				var callback = registerFont;
				var request = new XMLHttpRequest();
				request.onreadystatechange = function () {
					if (request.readyState == 4 && request.status == 200) {
						if (type == 'woff') {
							registerFont(request.responseText, name, type, url, ff);
						} else if (type == 'ttf') {
							registerFont(request.response, name, type, url, ff);
						}
					}
				};
				request.open('GET', url, true);
				if (type == 'woff') {
					request.overrideMimeType('text/plain; charset=x-user-defined');
				} else {
					request.responseType = "arraybuffer";
				}
				request.send(null);
			};
			var registerFont = function (responseText, name, type, url, ff) {
				if (type == 'woff') {
					var buf = _base64ToArrayBuffer(btoa(WORF.Converter.woffToSfnt(responseText)));
				} else {
					var buf = responseText;
				}
				doc.registerFont(name, buf);

				doc.font('Open Sans').fontSize(25)
					.text(title, 100, 40);
				doc.font('Open Sans').fontSize(12)
					.text(made_with, {
						continued: true
					})
					.text(visualiser_name, {
						continued: true,
						link: 'http://visualizeme.umk.pl'
					})
					.text(made_for + authorName);


				var scale = doc.page.width / $svg.width.baseVal.value;
				var width = $svg.width.baseVal.value;
				var height = $svg.height.baseVal.value;
				console.log(scale);
				$svg.setAttribute('transform', 'scale(' + scale + ')');

				SVGtoPDF(doc, $svg, 100, height / 6, {width: width, height: height});


				stream.on('finish', function () {
					console.log(stream.toBlobURL('application/pdf'));
					window.location = stream.toBlobURL('application/pdf');
				});
				doc.end();
			};
			loadFont('Open Sans', 'ttf', '/fonts/open-sans.regular.ttf', 'Open Sans')
		}


