!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=53)}({0:function(t,e,n){"use strict";var r="http://www.w3.org/1999/xhtml",i={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},o=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),i.hasOwnProperty(e)?{space:i[e],local:t}:t};function a(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===r&&e.documentElement.namespaceURI===r?e.createElement(t):e.createElementNS(n,t)}}function u(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var s=function(t){var e=o(t);return(e.local?u:a)(e)};function c(){}var l=function(t){return null==t?c:function(){return this.querySelector(t)}};function f(){return[]}var h=function(t){return null==t?f:function(){return this.querySelectorAll(t)}},p=function(t){return function(){return this.matches(t)}},d=function(t){return new Array(t.length)};function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var v="$";function y(t,e,n,r,i,o){for(var a,u=0,s=e.length,c=o.length;u<c;++u)(a=e[u])?(a.__data__=o[u],r[u]=a):n[u]=new g(t,o[u]);for(;u<s;++u)(a=e[u])&&(i[u]=a)}function _(t,e,n,r,i,o,a){var u,s,c,l={},f=e.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(s=e[u])&&(p[u]=c=v+a.call(s,s.__data__,u,e),c in l?i[u]=s:l[c]=s);for(u=0;u<h;++u)(s=l[c=v+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],l[c]=null):n[u]=new g(t,o[u]);for(u=0;u<f;++u)(s=e[u])&&l[p[u]]===s&&(i[u]=s)}function m(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function x(t){return function(){this.removeAttribute(t)}}function w(t){return function(){this.removeAttributeNS(t.space,t.local)}}function b(t,e){return function(){this.setAttribute(t,e)}}function T(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function M(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function C(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var N=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function k(t){return function(){this.style.removeProperty(t)}}function S(t,e,n){return function(){this.style.setProperty(t,e,n)}}function A(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function E(t,e){return t.style.getPropertyValue(e)||N(t).getComputedStyle(t,null).getPropertyValue(e)}function D(t){return function(){delete this[t]}}function j(t,e){return function(){this[t]=e}}function L(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function q(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new O(t)}function O(t){this._node=t,this._names=q(t.getAttribute("class")||"")}function R(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function H(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function U(t){return function(){R(this,t)}}function F(t){return function(){H(this,t)}}function I(t,e){return function(){(e.apply(this,arguments)?R:H)(this,t)}}O.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function z(){this.textContent=""}function $(t){return function(){this.textContent=t}}function B(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function W(){this.innerHTML=""}function Y(t){return function(){this.innerHTML=t}}function X(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function V(){this.nextSibling&&this.parentNode.appendChild(this)}function Z(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Q(){return null}function G(){var t=this.parentNode;t&&t.removeChild(this)}function J(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function K(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var tt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function nt(t,e,n){return t=rt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function rt(t,e,n){return function(r){var i=et;et=r;try{t.call(this,this.__data__,e,n)}finally{et=i}}}function it(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ot(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function at(t,e,n){var r=tt.hasOwnProperty(t.type)?nt:rt;return function(i,o,a){var u,s=this.__on,c=r(e,o,a);if(s)for(var l=0,f=s.length;l<f;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=n),void(u.value=e);this.addEventListener(t.type,c,n),u={type:t.type,name:t.name,value:e,listener:c,capture:n},s?s.push(u):this.__on=[u]}}function ut(t,e,n,r){var i=et;t.sourceEvent=et,et=t;try{return e.apply(n,r)}finally{et=i}}function st(t,e,n){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function ct(t,e){return function(){return st(this,t,e)}}function lt(t,e){return function(){return st(this,t,e.apply(this,arguments))}}var ft=[null];function ht(t,e){this._groups=t,this._parents=e}function pt(){return new ht([[document.documentElement]],ft)}ht.prototype=pt.prototype={constructor:ht,select:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,u=e[i],s=u.length,c=r[i]=new Array(s),f=0;f<s;++f)(o=u[f])&&(a=t.call(o,o.__data__,f,u))&&("__data__"in o&&(a.__data__=o.__data__),c[f]=a);return new ht(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,u=e[o],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new ht(r,i)},filter:function(t){"function"!=typeof t&&(t=p(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new ht(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),l=-1,this.each((function(t){d[++l]=t})),d;var n,r=e?_:y,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,u=new Array(a),s=new Array(a),c=new Array(a),l=0;l<a;++l){var f=i[l],h=o[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),g=d.length,v=s[l]=new Array(g),m=u[l]=new Array(g);r(f,h,v,m,c[l]=new Array(p),d,e);for(var x,w,b=0,T=0;b<g;++b)if(x=v[b]){for(b>=T&&(T=b+1);!(w=m[T])&&++T<g;);x._next=w||null}}return(u=new ht(u,i))._enter=s,u._exit=c,u},enter:function(){return new ht(this._enter||this._groups.map(d),this._parents)},exit:function(){return new ht(this._exit||this._groups.map(d),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=e[u],l=n[u],f=c.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;u<r;++u)a[u]=e[u];return new ht(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=m);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],s=u.length,c=i[o]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(e)}return new ht(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=o(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?w:x:"function"==typeof e?n.local?C:M:n.local?T:b)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?k:"function"==typeof e?A:S)(t,e,null==n?"":n)):E(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?D:"function"==typeof e?L:j)(t,e)):this.node()[t]},classed:function(t,e){var n=q(t+"");if(arguments.length<2){for(var r=P(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?I:e?U:F)(n,e))},text:function(t){return arguments.length?this.each(null==t?z:("function"==typeof t?B:$)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?X:Y)(t)):this.node().innerHTML},raise:function(){return this.each(V)},lower:function(){return this.each(Z)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),r=null==e?Q:"function"==typeof e?e:l(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(G)},clone:function(t){return this.select(t?K:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=it(t+""),a=o.length;if(!(arguments.length<2)){for(u=e?at:ot,null==n&&(n=!1),r=0;r<a;++r)this.each(u(o[r],e,n));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:ct)(t,e))}};var dt=pt,gt=function(t){return"string"==typeof t?new ht([[document.querySelector(t)]],[document.documentElement]):new ht([[t]],ft)},vt=0;function yt(){this._="@"+(++vt).toString(36)}yt.prototype=function(){return new yt}.prototype={constructor:yt,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var _t=function(){for(var t,e=et;t=e.sourceEvent;)e=t;return e},mt=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},xt=function(t){var e=_t();return e.changedTouches&&(e=e.changedTouches[0]),mt(t,e)},wt=function(t,e,n){arguments.length<3&&(n=e,e=_t().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return mt(t,r);return null};n.d(e,"c",(function(){return p})),n.d(e,"d",(function(){return xt})),n.d(e,"e",(function(){return o})),n.d(e,"f",(function(){return gt})),n.d(e,"g",(function(){return dt})),n.d(e,"h",(function(){return l})),n.d(e,"i",(function(){return h})),n.d(e,"j",(function(){return E})),n.d(e,"k",(function(){return wt})),n.d(e,"b",(function(){return et})),n.d(e,"a",(function(){return ut}))},1:function(t,e,n){"use strict";function r(){}function i(t,e){var n=new r;if(t instanceof r)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var i,o=-1,a=t.length;if(null==e)for(;++o<a;)n.set(o,t[o]);else for(;++o<a;)n.set(e(i=t[o],o,t),i)}else if(t)for(var u in t)n.set(u,t[u]);return n}r.prototype=i.prototype={constructor:r,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var o=i;function a(){}var u=o.prototype;function s(t,e){var n=new a;if(t instanceof a)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}a.prototype=s.prototype={constructor:a,has:u.has,add:function(t){return this["$"+(t+="")]=t,this},remove:u.remove,clear:u.clear,values:u.keys,size:u.size,empty:u.empty,each:u.each};n.d(e,"a",(function(){return o}))},2:function(t,e,n){"use strict";var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,u=(o.left,a);var s=Array.prototype,c=(s.slice,s.map,function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}),l=Math.sqrt(50),f=Math.sqrt(10),h=Math.sqrt(2),p=function(t,e,n){var r,i,o,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=d(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function d(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=l?10:o>=f?5:o>=h?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=l?10:o>=f?5:o>=h?2:1)}function g(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=l?i*=10:o>=f?i*=5:o>=h&&(i*=2),e<t?-i:i}var v=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r},y=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--a]=r[e];return n},_=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r};var m=Array.prototype.slice,x=function(t){return t},w=1,b=2,T=3,M=4,C=1e-6;function N(t){return"translate("+(t+.5)+",0)"}function k(t){return"translate(0,"+(t+.5)+")"}function S(t){return function(e){return+t(e)}}function A(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function E(){return!this.__axis}function D(t,e){var n=[],r=null,i=null,o=6,a=6,u=3,s=t===w||t===M?-1:1,c=t===M||t===b?"x":"y",l=t===w||t===T?N:k;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):x:i,d=Math.max(o,0)+u,g=e.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,_=(e.bandwidth?A:S)(e.copy()),m=f.selection?f.selection():f,N=m.selectAll(".domain").data([null]),k=m.selectAll(".tick").data(h,e).order(),D=k.exit(),j=k.enter().append("g").attr("class","tick"),L=k.select("line"),q=k.select("text");N=N.merge(N.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),k=k.merge(j),L=L.merge(j.append("line").attr("stroke","currentColor").attr(c+"2",s*o)),q=q.merge(j.append("text").attr("fill","currentColor").attr(c,s*d).attr("dy",t===w?"0em":t===T?"0.71em":"0.32em")),f!==m&&(N=N.transition(f),k=k.transition(f),L=L.transition(f),q=q.transition(f),D=D.transition(f).attr("opacity",C).attr("transform",(function(t){return isFinite(t=_(t))?l(t):this.getAttribute("transform")})),j.attr("opacity",C).attr("transform",(function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:_(t))}))),D.remove(),N.attr("d",t===M||t==b?a?"M"+s*a+","+v+"H0.5V"+y+"H"+s*a:"M0.5,"+v+"V"+y:a?"M"+v+","+s*a+"V0.5H"+y+"V"+s*a:"M"+v+",0.5H"+y),k.attr("opacity",1).attr("transform",(function(t){return l(_(t))})),L.attr(c+"2",s*o),q.attr(c,s*d).text(p),m.filter(E).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===b?"start":t===M?"end":"middle"),m.each((function(){this.__axis=_}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=m.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:m.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:m.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f}function j(t){return D(w,t)}function L(t){return D(T,t)}function q(t){return D(M,t)}var P={value:function(){}};function O(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new R(r)}function R(t){this._=t}function H(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function U(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function F(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=P,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}R.prototype=O.prototype={constructor:R,on:function(t,e){var n,r=this._,i=H(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=F(r[n],t.name,e);else if(null==e)for(n in r)r[n]=F(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=U(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new R(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var I=O,z=n(0);function $(){z.b.stopImmediatePropagation()}var B=function(){z.b.preventDefault(),z.b.stopImmediatePropagation()},W=function(t){var e=t.document.documentElement,n=Object(z.f)(t).on("dragstart.drag",B,!0);"onselectstart"in e?n.on("selectstart.drag",B,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function Y(t,e){var n=t.document.documentElement,r=Object(z.f)(t).on("dragstart.drag",null);e&&(r.on("click.drag",B,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var X=function(t){return function(){return t}};function V(t,e,n,r,i,o,a,u,s,c){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=s,this._=c}function Z(){return!z.b.ctrlKey&&!z.b.button}function Q(){return this.parentNode}function G(t){return null==t?{x:z.b.x,y:z.b.y}:t}function J(){return navigator.maxTouchPoints||"ontouchstart"in this}V.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var K=function(){var t,e,n,r,i=Z,o=Q,a=G,u=J,s={},c=I("start","drag","end"),l=0,f=0;function h(t){t.on("mousedown.drag",p).filter(u).on("touchstart.drag",v).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var a=m("mouse",o.apply(this,arguments),z.d,this,arguments);a&&(Object(z.f)(z.b.view).on("mousemove.drag",d,!0).on("mouseup.drag",g,!0),W(z.b.view),$(),n=!1,t=z.b.clientX,e=z.b.clientY,a("start"))}}function d(){if(B(),!n){var r=z.b.clientX-t,i=z.b.clientY-e;n=r*r+i*i>f}s.mouse("drag")}function g(){Object(z.f)(z.b.view).on("mousemove.drag mouseup.drag",null),Y(z.b.view,n),B(),s.mouse("end")}function v(){if(i.apply(this,arguments)){var t,e,n=z.b.changedTouches,r=o.apply(this,arguments),a=n.length;for(t=0;t<a;++t)(e=m(n[t].identifier,r,z.k,this,arguments))&&($(),e("start"))}}function y(){var t,e,n=z.b.changedTouches,r=n.length;for(t=0;t<r;++t)(e=s[n[t].identifier])&&(B(),e("drag"))}function _(){var t,e,n=z.b.changedTouches,i=n.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(e=s[n[t].identifier])&&($(),e("end"))}function m(t,e,n,r,i){var o,u,f,p=n(e,t),d=c.copy();if(Object(z.a)(new V(h,"beforestart",o,t,l,p[0],p[1],0,0,d),(function(){return null!=(z.b.subject=o=a.apply(r,i))&&(u=o.x-p[0]||0,f=o.y-p[1]||0,!0)})))return function a(c){var g,v=p;switch(c){case"start":s[t]=a,g=l++;break;case"end":delete s[t],--l;case"drag":p=n(e,t),g=l}Object(z.a)(new V(h,c,o,t,g,p[0]+u,p[1]+f,p[0]-v[0],p[1]-v[1],d),d.apply,d,[c,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:X(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:X(t),h):o},h.subject=function(t){return arguments.length?(a="function"==typeof t?t:X(t),h):a},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:X(!!t),h):u},h.on=function(){var t=c.on.apply(c,arguments);return t===c?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h},tt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function et(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function nt(){}var rt="\\s*([+-]?\\d+)\\s*",it="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ot="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",at=/^#([0-9a-f]{3,8})$/,ut=new RegExp("^rgb\\("+[rt,rt,rt]+"\\)$"),st=new RegExp("^rgb\\("+[ot,ot,ot]+"\\)$"),ct=new RegExp("^rgba\\("+[rt,rt,rt,it]+"\\)$"),lt=new RegExp("^rgba\\("+[ot,ot,ot,it]+"\\)$"),ft=new RegExp("^hsl\\("+[it,ot,ot]+"\\)$"),ht=new RegExp("^hsla\\("+[it,ot,ot,it]+"\\)$"),pt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function dt(){return this.rgb().formatHex()}function gt(){return this.rgb().formatRgb()}function vt(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=at.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?yt(e):3===n?new wt(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new wt(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new wt(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ut.exec(t))?new wt(e[1],e[2],e[3],1):(e=st.exec(t))?new wt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ct.exec(t))?_t(e[1],e[2],e[3],e[4]):(e=lt.exec(t))?_t(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ft.exec(t))?Ct(e[1],e[2]/100,e[3]/100,1):(e=ht.exec(t))?Ct(e[1],e[2]/100,e[3]/100,e[4]):pt.hasOwnProperty(t)?yt(pt[t]):"transparent"===t?new wt(NaN,NaN,NaN,0):null}function yt(t){return new wt(t>>16&255,t>>8&255,255&t,1)}function _t(t,e,n,r){return r<=0&&(t=e=n=NaN),new wt(t,e,n,r)}function mt(t){return t instanceof nt||(t=vt(t)),t?new wt((t=t.rgb()).r,t.g,t.b,t.opacity):new wt}function xt(t,e,n,r){return 1===arguments.length?mt(t):new wt(t,e,n,null==r?1:r)}function wt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function bt(){return"#"+Mt(this.r)+Mt(this.g)+Mt(this.b)}function Tt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Mt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ct(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new St(t,e,n,r)}function Nt(t){if(t instanceof St)return new St(t.h,t.s,t.l,t.opacity);if(t instanceof nt||(t=vt(t)),!t)return new St;if(t instanceof St)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=e===o?(n-r)/u+6*(n<r):n===o?(r-e)/u+2:(e-n)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new St(a,u,s,t.opacity)}function kt(t,e,n,r){return 1===arguments.length?Nt(t):new St(t,e,n,null==r?1:r)}function St(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function At(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Et(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}tt(nt,vt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:dt,formatHex:dt,formatHsl:function(){return Nt(this).formatHsl()},formatRgb:gt,toString:gt}),tt(wt,xt,et(nt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new wt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new wt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:bt,formatHex:bt,formatRgb:Tt,toString:Tt})),tt(St,kt,et(nt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new St(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new St(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new wt(At(t>=240?t-240:t+120,i,r),At(t,i,r),At(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Dt=function(t){return function(){return t}};function jt(t,e){return function(n){return t+n*e}}function Lt(t,e){var n=e-t;return n?jt(t,n>180||n<-180?n-360*Math.round(n/360):n):Dt(isNaN(t)?e:t)}function qt(t){return 1==(t=+t)?Pt:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Dt(isNaN(e)?n:e)}}function Pt(t,e){var n=e-t;return n?jt(t,n):Dt(isNaN(t)?e:t)}var Ot=function t(e){var n=qt(e);function r(t,e){var r=n((t=xt(t)).r,(e=xt(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Pt(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Rt(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=xt(e[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Rt((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<e-1?t[r+2]:2*o-i;return Et((n-r/e)*e,a,i,o,u)}})),Rt((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],u=t[(r+2)%e];return Et((n-r/e)*e,i,o,a,u)}}));var Ht=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Zt(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}},Ut=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Ft=function(t,e){return e-=t=+t,function(n){return t+e*n}},It=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Zt(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},zt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,$t=new RegExp(zt.source,"g");var Bt,Wt,Yt,Xt,Vt=function(t,e){var n,r,i,o=zt.lastIndex=$t.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=zt.exec(t))&&(r=$t.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Ft(n,r)})),o=$t.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})},Zt=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Dt(e):("number"===r?Ft:"string"===r?(n=vt(e))?(e=n,Ot):Vt:e instanceof vt?Ot:e instanceof Date?Ut:Array.isArray(e)?Ht:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?It:Ft)(t,e)},Qt=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Gt=180/Math.PI,Jt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Kt=function(t,e,n,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,s/=u),t*r<e*n&&(t=-t,e=-e,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Gt,skewX:Math.atan(s)*Gt,scaleX:a,scaleY:u}};function te(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,e,null,n);u.push({i:s-4,x:Ft(t,i)},{i:s-2,x:Ft(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ft(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,u,s),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ft(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,u,s),function(t,e,n,r,o,a){if(t!==n||e!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Ft(t,n)},{i:u-2,x:Ft(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var e,n=-1,r=s.length;++n<r;)u[(e=s[n]).i]=e.x(t);return u.join("")}}}var ee=te((function(t){return"none"===t?Jt:(Bt||(Bt=document.createElement("DIV"),Wt=document.documentElement,Yt=document.defaultView),Bt.style.transform=t,t=Yt.getComputedStyle(Wt.appendChild(Bt),null).getPropertyValue("transform"),Wt.removeChild(Bt),t=t.slice(7,-1).split(","),Kt(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ne=te((function(t){return null==t?Jt:(Xt||(Xt=document.createElementNS("http://www.w3.org/2000/svg","g")),Xt.setAttribute("transform",t),(t=Xt.transform.baseVal.consolidate())?(t=t.matrix,Kt(t.a,t.b,t.c,t.d,t.e,t.f)):Jt)}),", ",")",")");Math.SQRT2;function re(t){return function(e,n){var r=t((e=kt(e)).h,(n=kt(n)).h),i=Pt(e.s,n.s),o=Pt(e.l,n.l),a=Pt(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=a(t),e+""}}}re(Lt),re(Pt);var ie=Math.PI/180,oe=180/Math.PI,ae=.96422,ue=1,se=.82521,ce=4/29,le=6/29,fe=3*le*le,he=le*le*le;function pe(t){if(t instanceof ge)return new ge(t.l,t.a,t.b,t.opacity);if(t instanceof be)return Te(t);t instanceof wt||(t=mt(t));var e,n,r=me(t.r),i=me(t.g),o=me(t.b),a=ve((.2225045*r+.7168786*i+.0606169*o)/ue);return r===i&&i===o?e=n=a:(e=ve((.4360747*r+.3850649*i+.1430804*o)/ae),n=ve((.0139322*r+.0971045*i+.7141733*o)/se)),new ge(116*a-16,500*(e-a),200*(a-n),t.opacity)}function de(t,e,n,r){return 1===arguments.length?pe(t):new ge(t,e,n,null==r?1:r)}function ge(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function ve(t){return t>he?Math.pow(t,1/3):t/fe+ce}function ye(t){return t>le?t*t*t:fe*(t-ce)}function _e(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function me(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function xe(t){if(t instanceof be)return new be(t.h,t.c,t.l,t.opacity);if(t instanceof ge||(t=pe(t)),0===t.a&&0===t.b)return new be(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*oe;return new be(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function we(t,e,n,r){return 1===arguments.length?xe(t):new be(t,e,n,null==r?1:r)}function be(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Te(t){if(isNaN(t.h))return new ge(t.l,0,0,t.opacity);var e=t.h*ie;return new ge(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function Me(t){return function(e,n){var r=t((e=we(e)).h,(n=we(n)).h),i=Pt(e.c,n.c),o=Pt(e.l,n.l),a=Pt(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=a(t),e+""}}}tt(ge,de,et(nt,{brighter:function(t){return new ge(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ge(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new wt(_e(3.1338561*(e=ae*ye(e))-1.6168667*(t=ue*ye(t))-.4906146*(n=se*ye(n))),_e(-.9787684*e+1.9161415*t+.033454*n),_e(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),tt(be,we,et(nt,{brighter:function(t){return new be(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new be(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Te(this).rgb()}}));Me(Lt),Me(Pt);var Ce=-.29227,Ne=-.90649,ke=1.97294,Se=ke*Ne,Ae=1.78277*ke,Ee=1.78277*Ce- -.14861*Ne;function De(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof je)return new je(t.h,t.s,t.l,t.opacity);t instanceof wt||(t=mt(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Ee*r+Se*e-Ae*n)/(Ee+Se-Ae),o=r-i,a=(ke*(n-i)-Ce*o)/Ne,u=Math.sqrt(a*a+o*o)/(ke*i*(1-i)),s=u?Math.atan2(a,o)*oe-120:NaN;return new je(s<0?s+360:s,u,i,t.opacity)}(t):new je(t,e,n,null==r?1:r)}function je(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Le(t){return function e(n){function r(e,r){var i=t((e=De(e)).h,(r=De(r)).h),o=Pt(e.s,r.s),a=Pt(e.l,r.l),u=Pt(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=u(t),e+""}}return n=+n,r.gamma=e,r}(1)}tt(je,De,et(nt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new je(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new je(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ie,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new wt(255*(e+n*(-.14861*r+1.78277*i)),255*(e+n*(Ce*r+Ne*i)),255*(e+n*(ke*r)),this.opacity)}}));Le(Lt),Le(Pt);var qe,Pe,Oe=0,Re=0,He=0,Ue=1e3,Fe=0,Ie=0,ze=0,$e="object"==typeof performance&&performance.now?performance:Date,Be="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function We(){return Ie||(Be(Ye),Ie=$e.now()+ze)}function Ye(){Ie=0}function Xe(){this._call=this._time=this._next=null}function Ve(t,e,n){var r=new Xe;return r.restart(t,e,n),r}function Ze(){Ie=(Fe=$e.now())+ze,Oe=Re=0;try{!function(){We(),++Oe;for(var t,e=qe;e;)(t=Ie-e._time)>=0&&e._call.call(null,t),e=e._next;--Oe}()}finally{Oe=0,function(){var t,e,n=qe,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:qe=e);Pe=t,Ge(r)}(),Ie=0}}function Qe(){var t=$e.now(),e=t-Fe;e>Ue&&(ze-=e,Fe=t)}function Ge(t){Oe||(Re&&(Re=clearTimeout(Re)),t-Ie>24?(t<1/0&&(Re=setTimeout(Ze,t-$e.now()-ze)),He&&(He=clearInterval(He))):(He||(Fe=$e.now(),He=setInterval(Qe,Ue)),Oe=1,Be(Ze)))}Xe.prototype=Ve.prototype={constructor:Xe,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?We():+n)+(null==e?0:+e),this._next||Pe===this||(Pe?Pe._next=this:qe=this,Pe=this),this._call=t,this._time=n,Ge()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ge())}};var Je=function(t,e,n){var r=new Xe;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},Ke=I("start","end","cancel","interrupt"),tn=[],en=0,nn=1,rn=2,on=3,an=4,un=5,sn=6,cn=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(s){var c,l,f,h;if(n.state!==nn)return u();for(c in i)if((h=i[c]).name===n.name){if(h.state===on)return Je(o);h.state===an?(h.state=sn,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=sn,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(Je((function(){n.state===on&&(n.state=an,n.timer.restart(a,n.delay,n.time),a(s))})),n.state=rn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===rn){for(n.state=on,r=new Array(f=n.tween.length),c=0,l=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=h);r.length=l+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=un,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===un&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=sn,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Ve((function(t){n.state=nn,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Ke,tween:tn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:en})};function ln(t,e){var n=hn(t,e);if(n.state>en)throw new Error("too late; already scheduled");return n}function fn(t,e){var n=hn(t,e);if(n.state>on)throw new Error("too late; already running");return n}function hn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var pn=function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>rn&&n.state<un,n.state=sn,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}};function dn(t,e){var n,r;return function(){var i=fn(this,t),o=i.tween;if(o!==n)for(var a=0,u=(r=n=o).length;a<u;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function gn(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=fn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:e,value:n},s=0,c=i.length;s<c;++s)if(i[s].name===e){i[s]=u;break}s===c&&i.push(u)}o.tween=i}}function vn(t,e,n){var r=t._id;return t.each((function(){var t=fn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return hn(t,r).value[e]}}var yn=function(t,e){var n;return("number"==typeof e?Ft:e instanceof vt?Ot:(n=vt(e))?(e=n,Ot):Vt)(t,e)};function _n(t){return function(){this.removeAttribute(t)}}function mn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function xn(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function wn(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function bn(t,e,n){var r,i,o;return function(){var a,u,s=n(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=e(r=a,s));this.removeAttribute(t)}}function Tn(t,e,n){var r,i,o;return function(){var a,u,s=n(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=e(r=a,s));this.removeAttributeNS(t.space,t.local)}}function Mn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,i)),n}return i._value=e,i}function Cn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,i)),n}return i._value=e,i}function Nn(t,e){return function(){ln(this,t).delay=+e.apply(this,arguments)}}function kn(t,e){return e=+e,function(){ln(this,t).delay=e}}function Sn(t,e){return function(){fn(this,t).duration=+e.apply(this,arguments)}}function An(t,e){return e=+e,function(){fn(this,t).duration=e}}function En(t,e){if("function"!=typeof e)throw new Error;return function(){fn(this,t).ease=e}}function Dn(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ln:fn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(e,n),a.on=i}}var jn=z.g.prototype.constructor;function Ln(t){return function(){this.style.removeProperty(t)}}function qn(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,o,n)),r}return o._value=e,o}var Pn=0;function On(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Rn(){return++Pn}var Hn=z.g.prototype;On.prototype=function(t){return Object(z.g)().transition(t)}.prototype={constructor:On,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Object(z.h)(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,c=r[a],l=c.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=c[h])&&(s=t.call(u,u.__data__,h,c))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,cn(f[h],e,n,h,f,hn(u,n)));return new On(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Object(z.i)(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,c=r[u],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,p=t.call(s,s.__data__,f,c),d=hn(s,n),g=0,v=p.length;g<v;++g)(h=p[g])&&cn(h,e,n,g,p,d);o.push(p),a.push(s)}return new On(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=Object(z.c)(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new On(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=e[u],l=n[u],f=c.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;u<r;++u)a[u]=e[u];return new On(a,this._parents,this._name,this._id)},selection:function(){return new jn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Rn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=hn(a,e);cn(a,t,n,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new On(r,this._parents,t,n)},call:Hn.call,nodes:Hn.nodes,node:Hn.node,size:Hn.size,empty:Hn.empty,each:Hn.each,on:function(t,e){var n=this._id;return arguments.length<2?hn(this.node(),n).on.on(t):this.each(Dn(n,t,e))},attr:function(t,e){var n=Object(z.e)(t),r="transform"===n?ne:yn;return this.attrTween(t,"function"==typeof e?(n.local?Tn:bn)(n,r,vn(this,"attr."+t,e)):null==e?(n.local?mn:_n)(n):(n.local?wn:xn)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Object(z.e)(t);return this.tween(n,(r.local?Mn:Cn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ee:yn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=Object(z.j)(this,t),a=(this.style.removeProperty(t),Object(z.j)(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ln(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=Object(z.j)(this,t),u=n(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=Object(z.j)(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=e(r=a,u))}}(t,r,vn(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,u="end."+a;return function(){var s=fn(this,t),c=s.on,l=null==s.value[a]?o||(o=Ln(e)):void 0;c===n&&i===l||(r=(n=c).copy()).on(u,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=Object(z.j)(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,qn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(vn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=hn(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?dn:gn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Nn:kn)(e,t)):hn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Sn:An)(e,t)):hn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(En(e,t)):hn(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};n.each((function(){var n=fn(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(s)),n.on=e}))}))}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var Un=2*Math.PI,Fn=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Un);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*Un)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Un);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*Un)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Un);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*Un)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function In(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Fn.time=We(),Fn;return n}z.g.prototype.interrupt=function(t){return this.each((function(){pn(this,t)}))},z.g.prototype.transition=function(t){var e,n;t instanceof On?(e=t._id,t=t._name):(e=Rn(),(n=Fn).time=We(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)(a=u[c])&&cn(a,t,e,c,u,n||In(a,e));return new On(r,this._parents,t,e)};["e","w"].map(zn),["n","s"].map(zn),["n","e","s","w","nw","ne","se","sw"].map(zn);function zn(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var $n=Math.PI,Bn=2*$n,Wn=Bn-1e-6;function Yn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Xn(){return new Yn}Yn.prototype=Xn.prototype={constructor:Yn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,u=n-t,s=r-e,c=o-t,l=a-e,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(l*u-s*c)>1e-6&&i){var h=n-o,p=r-a,d=u*u+s*s,g=h*h+p*p,v=Math.sqrt(d),y=Math.sqrt(f),_=i*Math.tan(($n-Math.acos((d+f-g)/(2*v*y)))/2),m=_/y,x=_/v;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*c)+","+(e+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*p)+","+(this._x1=t+x*u)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),s=t+a,c=e+u,l=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),n&&(f<0&&(f=f%Bn+Bn),f>Wn?this._+="A"+n+","+n+",0,1,"+l+","+(t-a)+","+(e-u)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=$n)+","+l+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Vn=Xn;var Zn=n(1);Array.prototype.slice;var Qn={},Gn={},Jn=34,Kn=10,tr=13;function er(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function nr(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function rr(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function ir(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+rr(-e,6):e>9999?"+"+rr(e,6):rr(e,4))+"-"+rr(t.getUTCMonth()+1,2)+"-"+rr(t.getUTCDate(),2)+(o?"T"+rr(n,2)+":"+rr(r,2)+":"+rr(i,2)+"."+rr(o,3)+"Z":i?"T"+rr(n,2)+":"+rr(r,2)+":"+rr(i,2)+"Z":r||n?"T"+rr(n,2)+":"+rr(r,2)+"Z":"")}var or=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,u=0,s=o<=0,c=!1;function l(){if(s)return Gn;if(c)return c=!1,Qn;var e,r,i=a;if(t.charCodeAt(i)===Jn){for(;a++<o&&t.charCodeAt(a)!==Jn||t.charCodeAt(++a)===Jn;);return(e=a)>=o?s=!0:(r=t.charCodeAt(a++))===Kn?c=!0:r===tr&&(c=!0,t.charCodeAt(a)===Kn&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(e=a++))===Kn)c=!0;else if(r===tr)c=!0,t.charCodeAt(a)===Kn&&++a;else if(r!==n)continue;return t.slice(i,e)}return s=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===Kn&&--o,t.charCodeAt(o-1)===tr&&--o;(r=l())!==Gn;){for(var f=[];r!==Qn&&r!==Gn;)f.push(r),r=l();e&&null==(f=e(f,u++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?ir(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=er(t);return function(r,i){return e(n(r),i,t)}}(t,e):er(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=nr(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=nr(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},ar=or(","),ur=ar.parse,sr=(ar.parseRows,ar.format,ar.formatBody,ar.formatRows,or("\t")),cr=sr.parse;sr.parseRows,sr.format,sr.formatBody,sr.formatRows;function lr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var fr=function(t,e){return fetch(t,e).then(lr)};function hr(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),fr(e,n).then((function(e){return t(e,r)}))}}hr(ur),hr(cr);function pr(t){return function(e,n){return fr(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}pr("application/xml"),pr("text/html"),pr("image/svg+xml");var dr=function(t,e){var n;function r(){var r,i,o=n.length,a=0,u=0;for(r=0;r<o;++r)a+=(i=n[r]).x,u+=i.y;for(a=a/o-t,u=u/o-e,r=0;r<o;++r)(i=n[r]).x-=a,i.y-=u}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},gr=function(t){return function(){return t}},vr=function(){return 1e-6*(Math.random()-.5)};function yr(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,a,u,s,c,l,f,h,p=t._root,d={data:r},g=t._x0,v=t._y0,y=t._x1,_=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((c=e>=(o=(g+y)/2))?g=o:y=o,(l=n>=(a=(v+_)/2))?v=a:_=a,i=p,!(p=p[f=l<<1|c]))return i[f]=d,t;if(u=+t._x.call(null,p.data),s=+t._y.call(null,p.data),e===u&&n===s)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=e>=(o=(g+y)/2))?g=o:y=o,(l=n>=(a=(v+_)/2))?v=a:_=a}while((f=l<<1|c)==(h=(s>=a)<<1|u>=o));return i[h]=p,i[f]=d,t}var _r=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function mr(t){return t[0]}function xr(t){return t[1]}function wr(t,e,n){var r=new br(null==e?mr:e,null==n?xr:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function br(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Tr(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Mr=wr.prototype=br.prototype;function Cr(t){return t.x+t.vx}function Nr(t){return t.y+t.vy}Mr.copy=function(){var t,e,n=new br(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Tr(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Tr(e));return n},Mr.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return yr(this.cover(e,n),e,n,t)},Mr.addAll=function(t){var e,n,r,i,o=t.length,a=new Array(o),u=new Array(o),s=1/0,c=1/0,l=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(a[n]=r,u[n]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(s>l||c>f)return this;for(this.cover(s,c).cover(l,f),n=0;n<o;++n)yr(this,a[n],u[n],t[n]);return this},Mr.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var a,u,s=i-n,c=this._root;n>t||t>=i||r>e||e>=o;)switch(u=(e<r)<<1|t<n,(a=new Array(4))[u]=c,c=a,s*=2,u){case 0:i=n+s,o=r+s;break;case 1:n=i-s,o=r+s;break;case 2:i=n+s,r=o-s;break;case 3:n=i-s,r=o-s}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},Mr.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Mr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Mr.find=function(t,e,n){var r,i,o,a,u,s,c,l=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new _r(g,l,f,h,p)),null==n?n=1/0:(l=t-n,f=e-n,h=t+n,p=e+n,n*=n);s=d.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(o=s.y0)>p||(a=s.x1)<l||(u=s.y1)<f))if(g.length){var v=(i+a)/2,y=(o+u)/2;d.push(new _r(g[3],v,y,a,u),new _r(g[2],i,y,v,u),new _r(g[1],v,o,a,y),new _r(g[0],i,o,v,y)),(c=(e>=y)<<1|t>=v)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-c],d[d.length-1-c]=s)}else{var _=t-+this._x.call(null,g.data),m=e-+this._y.call(null,g.data),x=_*_+m*m;if(x<n){var w=Math.sqrt(n=x);l=t-w,f=e-w,h=t+w,p=e+w,r=g.data}}return r},Mr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,i,o,a,u,s,c,l,f,h,p=this._root,d=this._x0,g=this._y0,v=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((c=o>=(u=(d+v)/2))?d=u:v=u,(l=a>=(s=(g+y)/2))?g=s:y=s,e=p,!(p=p[f=l<<1|c]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},Mr.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Mr.root=function(){return this._root},Mr.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Mr.visit=function(t){var e,n,r,i,o,a,u=[],s=this._root;for(s&&u.push(new _r(s,this._x0,this._y0,this._x1,this._y1));e=u.pop();)if(!t(s=e.node,r=e.x0,i=e.y0,o=e.x1,a=e.y1)&&s.length){var c=(r+o)/2,l=(i+a)/2;(n=s[3])&&u.push(new _r(n,c,l,o,a)),(n=s[2])&&u.push(new _r(n,r,l,c,a)),(n=s[1])&&u.push(new _r(n,c,i,o,l)),(n=s[0])&&u.push(new _r(n,r,i,c,l))}return this},Mr.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new _r(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,a=e.x0,u=e.y0,s=e.x1,c=e.y1,l=(a+s)/2,f=(u+c)/2;(o=i[0])&&n.push(new _r(o,a,u,l,f)),(o=i[1])&&n.push(new _r(o,l,u,s,f)),(o=i[2])&&n.push(new _r(o,a,f,l,c)),(o=i[3])&&n.push(new _r(o,l,f,s,c))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Mr.x=function(t){return arguments.length?(this._x=t,this):this._x},Mr.y=function(t){return arguments.length?(this._y=t,this):this._y};var kr=function(t){var e,n,r=1,i=1;function o(){for(var t,o,u,s,c,l,f,h=e.length,p=0;p<i;++p)for(o=wr(e,Cr,Nr).visitAfter(a),t=0;t<h;++t)u=e[t],l=n[u.index],f=l*l,s=u.x+u.vx,c=u.y+u.vy,o.visit(d);function d(t,e,n,i,o){var a=t.data,h=t.r,p=l+h;if(!a)return e>s+p||i<s-p||n>c+p||o<c-p;if(a.index>u.index){var d=s-a.x-a.vx,g=c-a.y-a.vy,v=d*d+g*g;v<p*p&&(0===d&&(v+=(d=vr())*d),0===g&&(v+=(g=vr())*g),v=(p-(v=Math.sqrt(v)))/v*r,u.vx+=(d*=v)*(p=(h*=h)/(f+h)),u.vy+=(g*=v)*p,a.vx-=d*(p=1-p),a.vy-=g*p)}}}function a(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function u(){if(e){var r,i,o=e.length;for(n=new Array(o),r=0;r<o;++r)i=e[r],n[i.index]=+t(i,r,e)}}return"function"!=typeof t&&(t=gr(null==t?1:+t)),o.initialize=function(t){e=t,u()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(e){return arguments.length?(t="function"==typeof e?e:gr(+e),u(),o):t},o};function Sr(t){return t.index}function Ar(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var Er=function(t){var e,n,r,i,o,a=Sr,u=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},s=gr(30),c=1;function l(r){for(var i=0,a=t.length;i<c;++i)for(var u,s,l,f,h,p,d,g=0;g<a;++g)s=(u=t[g]).source,f=(l=u.target).x+l.vx-s.x-s.vx||vr(),h=l.y+l.vy-s.y-s.vy||vr(),f*=p=((p=Math.sqrt(f*f+h*h))-n[g])/p*r*e[g],h*=p,l.vx-=f*(d=o[g]),l.vy-=h*d,s.vx+=f*(d=1-d),s.vy+=h*d}function f(){if(r){var u,s,c=r.length,l=t.length,f=Object(Zn.a)(r,a);for(u=0,i=new Array(c);u<l;++u)(s=t[u]).index=u,"object"!=typeof s.source&&(s.source=Ar(f,s.source)),"object"!=typeof s.target&&(s.target=Ar(f,s.target)),i[s.source.index]=(i[s.source.index]||0)+1,i[s.target.index]=(i[s.target.index]||0)+1;for(u=0,o=new Array(l);u<l;++u)s=t[u],o[u]=i[s.source.index]/(i[s.source.index]+i[s.target.index]);e=new Array(l),h(),n=new Array(l),p()}}function h(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+u(t[n],n,t)}function p(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+s(t[e],e,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(e){return arguments.length?(t=e,f(),l):t},l.id=function(t){return arguments.length?(a=t,l):a},l.iterations=function(t){return arguments.length?(c=+t,l):c},l.strength=function(t){return arguments.length?(u="function"==typeof t?t:gr(+t),h(),l):u},l.distance=function(t){return arguments.length?(s="function"==typeof t?t:gr(+t),p(),l):s},l};function Dr(t){return t.x}function jr(t){return t.y}var Lr=10,qr=Math.PI*(3-Math.sqrt(5)),Pr=function(t){var e,n=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=Object(Zn.a)(),s=Ve(l),c=I("tick","end");function l(){f(),c.call("tick",e),n<r&&(s.stop(),c.call("end",e))}function f(r){var s,c,l=t.length;void 0===r&&(r=1);for(var f=0;f<r;++f)for(n+=(o-n)*i,u.each((function(t){t(n)})),s=0;s<l;++s)null==(c=t[s]).fx?c.x+=c.vx*=a:(c.x=c.fx,c.vx=0),null==c.fy?c.y+=c.vy*=a:(c.y=c.fy,c.vy=0);return e}function h(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var i=Lr*Math.sqrt(n),o=n*qr;e.x=i*Math.cos(o),e.y=i*Math.sin(o)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function p(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),h(),e={tick:f,restart:function(){return s.restart(l),e},stop:function(){return s.stop(),e},nodes:function(n){return arguments.length?(t=n,h(),u.each(p),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(i=+t,e):+i},alphaTarget:function(t){return arguments.length?(o=+t,e):o},velocityDecay:function(t){return arguments.length?(a=1-t,e):1-a},force:function(t,n){return arguments.length>1?(null==n?u.remove(t):u.set(t,p(n)),e):u.get(t)},find:function(e,n,r){var i,o,a,u,s,c=0,l=t.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(a=(i=e-(u=t[c]).x)*i+(o=n-u.y)*o)<r&&(s=u,r=a);return s},on:function(t,n){return arguments.length>1?(c.on(t,n),e):c.on(t)}}},Or=function(){var t,e,n,r,i=gr(-30),o=1,a=1/0,u=.81;function s(r){var i,o=t.length,a=wr(t,Dr,jr).visitAfter(l);for(n=r,i=0;i<o;++i)e=t[i],a.visit(f)}function c(){if(t){var e,n,o=t.length;for(r=new Array(o),e=0;e<o;++e)n=t[e],r[n.index]=+i(n,e,t)}}function l(t){var e,n,i,o,a,u=0,s=0;if(t.length){for(i=o=a=0;a<4;++a)(e=t[a])&&(n=Math.abs(e.value))&&(u+=e.value,s+=n,i+=n*e.x,o+=n*e.y);t.x=i/s,t.y=o/s}else{(e=t).x=e.data.x,e.y=e.data.y;do{u+=r[e.data.index]}while(e=e.next)}t.value=u}function f(t,i,s,c){if(!t.value)return!0;var l=t.x-e.x,f=t.y-e.y,h=c-i,p=l*l+f*f;if(h*h/u<p)return p<a&&(0===l&&(p+=(l=vr())*l),0===f&&(p+=(f=vr())*f),p<o&&(p=Math.sqrt(o*p)),e.vx+=l*t.value*n/p,e.vy+=f*t.value*n/p),!0;if(!(t.length||p>=a)){(t.data!==e||t.next)&&(0===l&&(p+=(l=vr())*l),0===f&&(p+=(f=vr())*f),p<o&&(p=Math.sqrt(o*p)));do{t.data!==e&&(h=r[t.data.index]*n/p,e.vx+=l*h,e.vy+=f*h)}while(t=t.next)}}return s.initialize=function(e){t=e,c()},s.strength=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),c(),s):i},s.distanceMin=function(t){return arguments.length?(o=t*t,s):Math.sqrt(o)},s.distanceMax=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.theta=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s},Rr=function(t){var e,n,r,i=gr(.1);function o(t){for(var i,o=0,a=e.length;o<a;++o)(i=e[o]).vx+=(r[o]-i.x)*n[o]*t}function a(){if(e){var o,a=e.length;for(n=new Array(a),r=new Array(a),o=0;o<a;++o)n[o]=isNaN(r[o]=+t(e[o],o,e))?0:+i(e[o],o,e)}}return"function"!=typeof t&&(t=gr(null==t?0:+t)),o.initialize=function(t){e=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),a(),o):i},o.x=function(e){return arguments.length?(t="function"==typeof e?e:gr(+e),a(),o):t},o},Hr=function(t){var e,n,r,i=gr(.1);function o(t){for(var i,o=0,a=e.length;o<a;++o)(i=e[o]).vy+=(r[o]-i.y)*n[o]*t}function a(){if(e){var o,a=e.length;for(n=new Array(a),r=new Array(a),o=0;o<a;++o)n[o]=isNaN(r[o]=+t(e[o],o,e))?0:+i(e[o],o,e)}}return"function"!=typeof t&&(t=gr(null==t?0:+t)),o.initialize=function(t){e=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),a(),o):i},o.y=function(e){return arguments.length?(t="function"==typeof e?e:gr(+e),a(),o):t},o},Ur=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Fr=function(t){return(t=Ur(Math.abs(t)))?t[1]:NaN},Ir=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function zr(t){if(!(e=Ir.exec(t)))throw new Error("invalid format: "+t);var e;return new $r({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function $r(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}zr.prototype=$r.prototype,$r.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Br,Wr,Yr,Xr,Vr=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Zr=function(t,e){var n=Ur(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Qr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Zr(100*t,e)},r:Zr,s:function(t,e){var n=Ur(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Br=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ur(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Gr=function(t){return t},Jr=Array.prototype.map,Kr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Wr=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Gr:(e=Jr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=e[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Gr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Jr.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=zr(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,v=t.precision,y=t.trim,_=t.type;"n"===_?(g=!0,_="g"):Qr[_]||(void 0===v&&(v=12),y=!0,_="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var m="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",x="$"===h?o:/[%p]/.test(_)?s:"",w=Qr[_],b=/[defgprs%]/.test(_);function T(t){var i,o,s,h=m,T=x;if("c"===_)T=w(t)+T,t="";else{var M=(t=+t)<0;if(t=isNaN(t)?l:w(Math.abs(t),v),y&&(t=Vr(t)),M&&0==+t&&(M=!1),h=(M?"("===f?f:c:"-"===f||"("===f?"":f)+h,T=("s"===_?Kr[8+Br/3]:"")+T+(M&&"("===f?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){T=(46===s?a+t.slice(i+1):t.slice(i))+T,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var C=h.length+t.length+T.length,N=C<d?new Array(d-C+1).join(e):"";switch(g&&p&&(t=r(N+t,N.length?d-T.length:1/0),N=""),n){case"<":t=h+t+T+N;break;case"=":t=h+N+t+T;break;case"^":t=N.slice(0,C=N.length>>1)+h+t+T+N.slice(C);break;default:t=N+h+t+T}return u(t)}return v=void 0===v?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),T.toString=function(){return t+""},T}return{format:f,formatPrefix:function(t,e){var n=f(((t=zr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Fr(e)/3))),i=Math.pow(10,-r),o=Kr[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Yr=Wr.format,Xr=Wr.formatPrefix;var ti=function(){return new ei};function ei(){this.reset()}ei.prototype={constructor:ei,reset:function(){this.s=this.t=0},add:function(t){ri(ni,t,this.t),ri(this,ni.s,this.s),this.s?this.t+=ni.t:this.s=ni.t},valueOf:function(){return this.s}};var ni=new ei;function ri(t,e,n){var r=t.s=e+n,i=r-e,o=r-i;t.t=e-o+(n-i)}var ii=1e-6,oi=1e-12,ai=Math.PI,ui=ai/2,si=ai/4,ci=2*ai,li=ai/180,fi=Math.abs,hi=Math.atan,pi=Math.atan2,di=Math.cos,gi=(Math.ceil,Math.exp),vi=(Math.floor,Math.log),yi=(Math.pow,Math.sin),_i=Math.sign||function(t){return t>0?1:t<0?-1:0},mi=Math.sqrt,xi=Math.tan;function wi(t){return t>1?0:t<-1?ai:Math.acos(t)}function bi(t){return t>1?ui:t<-1?-ui:Math.asin(t)}function Ti(){}ti(),ti();function Mi(t){var e=t[0],n=t[1],r=di(n);return[r*di(e),r*yi(e),yi(n)]}function Ci(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Ni(t){var e=mi(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}ti();function ki(t,e){return[fi(t)>ai?t+Math.round(-t/ci)*ci:t,e]}ki.invert=ki;var Si=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Ti,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},Ai=function(t,e){return fi(t[0]-e[0])<ii&&fi(t[1]-e[1])<ii};function Ei(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var Di=function(t,e,n,r,i){var o,a,u=[],s=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],a=t[e];if(Ai(r,a)){for(i.lineStart(),o=0;o<e;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else u.push(n=new Ei(r,t,null,!0)),s.push(n.o=new Ei(r,null,n,!1)),u.push(n=new Ei(a,t,null,!1)),s.push(n.o=new Ei(a,null,n,!0))}})),u.length){for(s.sort(e),ji(u),ji(s),o=0,a=s.length;o<a;++o)s[o].e=n=!n;for(var c,l,f=u[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,a=c.length;o<a;++o)i.point((l=c[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(c=h.p.z,o=c.length-1;o>=0;--o)i.point((l=c[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}c=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}};function ji(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}var Li=ti();function qi(t){return fi(t[0])<=ai?t[0]:_i(t[0])*((fi(t[0])+ai)%ci-ai)}var Pi=function(t,e){var n=qi(e),r=e[1],i=yi(r),o=[yi(n),-di(n),0],a=0,u=0;Li.reset(),1===i?r=ui+ii:-1===i&&(r=-ui-ii);for(var s=0,c=t.length;s<c;++s)if(f=(l=t[s]).length)for(var l,f,h=l[f-1],p=qi(h),d=h[1]/2+si,g=yi(d),v=di(d),y=0;y<f;++y,p=m,g=w,v=b,h=_){var _=l[y],m=qi(_),x=_[1]/2+si,w=yi(x),b=di(x),T=m-p,M=T>=0?1:-1,C=M*T,N=C>ai,k=g*w;if(Li.add(pi(k*M*yi(C),v*b+k*di(C))),a+=N?T+M*ci:T,N^p>=n^m>=n){var S=Ci(Mi(h),Mi(_));Ni(S);var A=Ci(o,S);Ni(A);var E=(N^T>=0?-1:1)*bi(A[2]);(r>E||r===E&&(S[0]||S[1]))&&(u+=N^T>=0?1:-1)}}return(a<-ii||a<ii&&Li<-ii)^1&u},Oi=function(t,e,n,r){return function(i){var o,a,u,s=e(i),c=Si(),l=e(c),f=!1,h={point:p,lineStart:g,lineEnd:v,polygonStart:function(){h.point=_,h.lineStart=m,h.lineEnd=x,a=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=g,h.lineEnd=v,a=y(a);var t=Pi(o,r);a.length?(f||(i.polygonStart(),f=!0),Di(a,Hi,t,n,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(e,n){t(e,n)&&i.point(e,n)}function d(t,e){s.point(t,e)}function g(){h.point=d,s.lineStart()}function v(){h.point=p,s.lineEnd()}function _(t,e){u.push([t,e]),l.point(t,e)}function m(){l.lineStart(),u=[]}function x(){_(u[0][0],u[0][1]),l.lineEnd();var t,e,n,r,s=l.clean(),h=c.result(),p=h.length;if(u.pop(),o.push(u),u=null,p)if(1&s){if((e=(n=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else p>1&&2&s&&h.push(h.pop().concat(h.shift())),a.push(h.filter(Ri))}return h}};function Ri(t){return t.length>1}function Hi(t,e){return((t=t.x)[0]<0?t[1]-ui-ii:ui-t[1])-((e=e.x)[0]<0?e[1]-ui-ii:ui-e[1])}Oi((function(){return!0}),(function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?ai:-ai,s=fi(o-n);fi(s-ai)<ii?(t.point(n,r=(r+a)/2>0?ui:-ui),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),e=0):i!==u&&s>=ai&&(fi(n-i)<ii&&(n-=i*ii),fi(o-u)<ii&&(o-=u*ii),r=function(t,e,n,r){var i,o,a=yi(t-n);return fi(a)>ii?hi((yi(e)*(o=di(r))*yi(n)-yi(r)*(i=di(e))*yi(t))/(i*o*a)):(e+r)/2}(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=o,r=a),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var i;if(null==t)i=n*ui,r.point(-ai,i),r.point(0,i),r.point(ai,i),r.point(ai,0),r.point(ai,-i),r.point(0,-i),r.point(-ai,-i),r.point(-ai,0),r.point(-ai,i);else if(fi(t[0]-e[0])>ii){var o=t[0]<e[0]?ai:-ai;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}),[-ai,-ui]);ti();ti(),ti();function Ui(t){this._context=t}Ui.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,ci)}},result:Ti};ti();function Fi(){this._string=[]}function Ii(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Fi.prototype={_radius:4.5,_circle:Ii(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Ii(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function zi(t){return function(e){var n=new $i;for(var r in t)n[r]=t[r];return n.stream=e,n}}function $i(){}$i.prototype={constructor:$i,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};di(30*li);zi({point:function(t,e){this.stream.point(t*li,e*li)}});function Bi(t){return function(e,n){var r=di(e),i=di(n),o=t(r*i);return[o*i*yi(e),o*yi(n)]}}function Wi(t){return function(e,n){var r=mi(e*e+n*n),i=t(r),o=yi(i),a=di(i);return[pi(e*o,r*a),bi(r&&n*o/r)]}}var Yi=Bi((function(t){return mi(2/(1+t))}));Yi.invert=Wi((function(t){return 2*bi(t/2)}));var Xi=Bi((function(t){return(t=wi(t))&&t/yi(t)}));Xi.invert=Wi((function(t){return t}));function Vi(t,e){return[t,vi(xi((ui+e)/2))]}Vi.invert=function(t,e){return[t,2*hi(gi(e))-ui]};function Zi(t,e){return[t,e]}Zi.invert=Zi;var Qi=1.340264,Gi=-.081106,Ji=893e-6,Ki=.003796,to=mi(3)/2;function eo(t,e){var n=bi(to*yi(e)),r=n*n,i=r*r*r;return[t*di(n)/(to*(Qi+3*Gi*r+i*(7*Ji+9*Ki*r))),n*(Qi+Gi*r+i*(Ji+Ki*r))]}eo.invert=function(t,e){for(var n,r=e,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=n=(r*(Qi+Gi*i+o*(Ji+Ki*i))-e)/(Qi+3*Gi*i+o*(7*Ji+9*Ki*i)))*r)*i*i,!(fi(n)<oi));++a);return[to*t*(Qi+3*Gi*i+o*(7*Ji+9*Ki*i))/di(r),bi(yi(r)/to)]};function no(t,e){var n=di(e),r=di(t)*n;return[n*yi(t)/r,yi(e)/r]}no.invert=Wi(hi);function ro(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}ro.invert=function(t,e){var n,r=e,i=25;do{var o=r*r,a=o*o;r-=n=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-e)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(fi(n)>ii&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};function io(t,e){return[di(e)*yi(t),yi(e)]}io.invert=Wi(bi);function oo(t,e){var n=di(e),r=1+di(t)*n;return[n*yi(t)/r,yi(e)/r]}oo.invert=Wi((function(t){return 2*hi(t)}));function ao(t,e){return[vi(xi((ui+e)/2)),-t]}ao.invert=function(t,e){return[-e,2*hi(gi(t))-ui]};function uo(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function so(t,e){var n,r,i,o,a,u=new ho(t),s=+t.value&&(u.value=t.value),c=[u];for(null==e&&(e=co);n=c.pop();)if(s&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)c.push(r=n.children[o]=new ho(i[o])),r.parent=n,r.depth=n.depth+1;return u.eachBefore(fo)}function co(t){return t.children}function lo(t){t.data=t.data.data}function fo(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function ho(t){this.data=t,this.depth=this.height=0,this.parent=null}ho.prototype=so.prototype={constructor:ho,count:function(){return this.eachAfter(uo)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return so(this).eachBefore(lo)}};Array.prototype.slice;var po=function(t,e,n,r,i){for(var o,a=t.children,u=-1,s=a.length,c=t.value&&(r-e)/t.value;++u<s;)(o=a[u]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*c};function go(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}go.prototype=Object.create(ho.prototype);var vo=function(t,e,n,r,i){for(var o,a=t.children,u=-1,s=a.length,c=t.value&&(i-n)/t.value;++u<s;)(o=a[u]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*c},yo=(1+Math.sqrt(5))/2;function _o(t,e,n,r,i,o){for(var a,u,s,c,l,f,h,p,d,g,v,y=[],_=e.children,m=0,x=0,w=_.length,b=e.value;m<w;){s=i-n,c=o-r;do{l=_[x++].value}while(!l&&x<w);for(f=h=l,v=l*l*(g=Math.max(c/s,s/c)/(b*t)),d=Math.max(h/v,v/f);x<w;++x){if(l+=u=_[x].value,u<f&&(f=u),u>h&&(h=u),v=l*l*g,(p=Math.max(h/v,v/f))>d){l-=u;break}d=p}y.push(a={value:l,dice:s<c,children:_.slice(m,x)}),a.dice?po(a,n,r,i,b?r+=c*l/b:o):vo(a,n,r,b?n+=s*l/b:i,o),b-=l,m=x}return y}(function t(e){function n(t,n,r,i,o){_o(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(yo),function t(e){function n(t,n,r,i,o){if((a=t._squarify)&&a.ratio===e)for(var a,u,s,c,l,f=-1,h=a.length,p=t.value;++f<h;){for(s=(u=a[f]).children,c=u.value=0,l=s.length;c<l;++c)u.value+=s[c].value;u.dice?po(u,n,r,i,r+=(o-r)*u.value/p):vo(u,n,r,n+=(i-n)*u.value/p,o),p-=u.value}else t._squarify=a=_o(e,t,n,r,i,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(yo);var mo=function(){return Math.random()},xo=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(mo),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(mo)),wo=(function t(e){function n(){var t=xo.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(mo),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(mo));(function t(e){function n(t){var n=wo.source(e)(t);return function(){return n()/t}}return n.source=t,n})(mo),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(mo);function bo(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var To=Array.prototype,Mo=To.map,Co=To.slice,No={name:"implicit"};function ko(){var t=Object(Zn.a)(),e=[],n=[],r=No;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==No)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Object(Zn.a)();for(var r,o,a=-1,u=n.length;++a<u;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Co.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return ko(e,n).unknown(r)},bo.apply(i,arguments),i}function So(){var t,e,n=ko().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,u=0,s=0,l=.5;function f(){var n=r().length,f=o[1]<o[0],h=o[f-0],p=o[1-f];t=(p-h)/Math.max(1,n-u+2*s),a&&(t=Math.floor(t)),h+=(p-h-t*(n-u))*l,e=t*(1-u),a&&(h=Math.round(h),e=Math.round(e));var d=c(n).map((function(e){return h+t*e}));return i(f?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),f()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],f()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,f()):a},n.padding=function(t){return arguments.length?(u=Math.min(1,s=+t),f()):u},n.paddingInner=function(t){return arguments.length?(u=Math.min(1,t),f()):u},n.paddingOuter=function(t){return arguments.length?(s=+t,f()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},n.copy=function(){return So(r(),o).round(a).paddingInner(u).paddingOuter(s).align(l)},bo.apply(f(),arguments)}var Ao=function(t){return function(){return t}},Eo=function(t){return+t},Do=[0,1];function jo(t){return t}function Lo(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Ao(isNaN(e)?NaN:.5)}function qo(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Po(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Lo(i,r),o=n(a,o)):(r=Lo(r,i),o=n(o,a)),function(t){return o(r(t))}}function Oo(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Lo(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=u(t,e,1,r)-1;return o[n](i[n](e))}}function Ro(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ho(){var t,e,n,r,i,o,a=Do,u=Do,s=Zt,c=jo;function l(){return r=Math.min(a.length,u.length)>2?Oo:Po,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),u,s)))(t(c(e)))}return f.invert=function(n){return c(e((o||(o=r(u,a.map(t),Ft)))(n)))},f.domain=function(t){return arguments.length?(a=Mo.call(t,Eo),c===jo||(c=qo(a)),l()):a.slice()},f.range=function(t){return arguments.length?(u=Co.call(t),l()):u.slice()},f.rangeRound=function(t){return u=Co.call(t),s=Qt,l()},f.clamp=function(t){return arguments.length?(c=t?qo(a):jo,f):c!==jo},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,l()}}function Uo(t,e){return Ho()(t,e)}var Fo=function(t,e,n,r){var i,o=g(t,e,n);switch((r=zr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Fr(e)/3)))-Fr(Math.abs(t)))}(o,a))||(r.precision=i),Xr(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Fr(e)-Fr(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Fr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Yr(r)};function Io(t){var e=t.domain;return t.ticks=function(t){var n=e();return p(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Fo(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=d(u,s,n))>0?r=d(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=d(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,n)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,e(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,e(i)),t},t}function zo(){var t=Uo(jo,jo);return t.copy=function(){return Ro(t,zo())},bo.apply(t,arguments),Io(t)}function $o(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Bo(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Wo(t){return t<0?-t*t:t*t}function Yo(t){var e=t(jo,jo),n=1;function r(){return 1===n?t(jo,jo):.5===n?t(Bo,Wo):t($o(n),$o(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},Io(e)}function Xo(){var t=Yo(Ho());return t.copy=function(){return Ro(t,Xo()).exponent(t.exponent())},bo.apply(t,arguments),t}var Vo=new Date,Zo=new Date;function Qo(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return u},i.filter=function(n){return Qo((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return Vo.setTime(+e),Zo.setTime(+r),t(Vo),t(Zo),Math.floor(n(Vo,Zo))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Go=Qo((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Go.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qo((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var Jo=Go,Ko=(Go.range,Qo((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),ta=(Ko.range,6e4),ea=6048e5;function na(t){return Qo((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ta)/ea}))}var ra=na(0),ia=na(1),oa=na(2),aa=na(3),ua=na(4),sa=na(5),ca=na(6),la=(ra.range,ia.range,oa.range,aa.range,ua.range,sa.range,ca.range,Qo((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ta)/864e5}),(function(t){return t.getDate()-1}))),fa=la,ha=(la.range,Qo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*ta)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),pa=(ha.range,Qo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*ta)}),(function(t,e){return(e-t)/ta}),(function(t){return t.getMinutes()}))),da=(pa.range,Qo((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),ga=(da.range,Qo((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));ga.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Qo((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ga:null};ga.range;function va(t){return Qo((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/ea}))}var ya=va(0),_a=va(1),ma=va(2),xa=va(3),wa=va(4),ba=va(5),Ta=va(6),Ma=(ya.range,_a.range,ma.range,xa.range,wa.range,ba.range,Ta.range,Qo((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Ca=Ma,Na=(Ma.range,Qo((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Na.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qo((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var ka=Na;Na.range;function Sa(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Aa(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ea(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Da,ja,La,qa,Pa={"-":"",_:" ",0:"0"},Oa=/^\s*\d+/,Ra=/^%/,Ha=/[\\^$*+?|[\]().{}]/g;function Ua(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Fa(t){return t.replace(Ha,"\\$&")}function Ia(t){return new RegExp("^(?:"+t.map(Fa).join("|")+")","i")}function za(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function $a(t,e,n){var r=Oa.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ba(t,e,n){var r=Oa.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Wa(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Ya(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Xa(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Va(t,e,n){var r=Oa.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Za(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Qa(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ga(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Ja(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Ka(t,e,n){var r=Oa.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function tu(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function eu(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function nu(t,e,n){var r=Oa.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ru(t,e,n){var r=Oa.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function iu(t,e,n){var r=Oa.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ou(t,e,n){var r=Ra.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function au(t,e,n){var r=Oa.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function uu(t,e,n){var r=Oa.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function su(t,e){return Ua(t.getDate(),e,2)}function cu(t,e){return Ua(t.getHours(),e,2)}function lu(t,e){return Ua(t.getHours()%12||12,e,2)}function fu(t,e){return Ua(1+fa.count(Jo(t),t),e,3)}function hu(t,e){return Ua(t.getMilliseconds(),e,3)}function pu(t,e){return hu(t,e)+"000"}function du(t,e){return Ua(t.getMonth()+1,e,2)}function gu(t,e){return Ua(t.getMinutes(),e,2)}function vu(t,e){return Ua(t.getSeconds(),e,2)}function yu(t){var e=t.getDay();return 0===e?7:e}function _u(t,e){return Ua(ra.count(Jo(t),t),e,2)}function mu(t,e){var n=t.getDay();return t=n>=4||0===n?ua(t):ua.ceil(t),Ua(ua.count(Jo(t),t)+(4===Jo(t).getDay()),e,2)}function xu(t){return t.getDay()}function wu(t,e){return Ua(ia.count(Jo(t),t),e,2)}function bu(t,e){return Ua(t.getFullYear()%100,e,2)}function Tu(t,e){return Ua(t.getFullYear()%1e4,e,4)}function Mu(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ua(e/60|0,"0",2)+Ua(e%60,"0",2)}function Cu(t,e){return Ua(t.getUTCDate(),e,2)}function Nu(t,e){return Ua(t.getUTCHours(),e,2)}function ku(t,e){return Ua(t.getUTCHours()%12||12,e,2)}function Su(t,e){return Ua(1+Ca.count(ka(t),t),e,3)}function Au(t,e){return Ua(t.getUTCMilliseconds(),e,3)}function Eu(t,e){return Au(t,e)+"000"}function Du(t,e){return Ua(t.getUTCMonth()+1,e,2)}function ju(t,e){return Ua(t.getUTCMinutes(),e,2)}function Lu(t,e){return Ua(t.getUTCSeconds(),e,2)}function qu(t){var e=t.getUTCDay();return 0===e?7:e}function Pu(t,e){return Ua(ya.count(ka(t),t),e,2)}function Ou(t,e){var n=t.getUTCDay();return t=n>=4||0===n?wa(t):wa.ceil(t),Ua(wa.count(ka(t),t)+(4===ka(t).getUTCDay()),e,2)}function Ru(t){return t.getUTCDay()}function Hu(t,e){return Ua(_a.count(ka(t),t),e,2)}function Uu(t,e){return Ua(t.getUTCFullYear()%100,e,2)}function Fu(t,e){return Ua(t.getUTCFullYear()%1e4,e,4)}function Iu(){return"+0000"}function zu(){return"%"}function $u(t){return+t}function Bu(t){return Math.floor(+t/1e3)}!function(t){Da=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,c=Ia(i),l=za(i),f=Ia(o),h=za(o),p=Ia(a),d=za(a),g=Ia(u),v=za(u),y=Ia(s),_=za(s),m={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:su,e:su,f:pu,H:cu,I:lu,j:fu,L:hu,m:du,M:gu,p:function(t){return i[+(t.getHours()>=12)]},Q:$u,s:Bu,S:vu,u:yu,U:_u,V:mu,w:xu,W:wu,x:null,X:null,y:bu,Y:Tu,Z:Mu,"%":zu},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Cu,e:Cu,f:Eu,H:Nu,I:ku,j:Su,L:Au,m:Du,M:ju,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:$u,s:Bu,S:Lu,u:qu,U:Pu,V:Ou,w:Ru,W:Hu,x:null,X:null,y:Uu,Y:Fu,Z:Iu,"%":zu},w={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=_[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return M(t,e,n,r)},d:Ja,e:Ja,f:iu,H:tu,I:tu,j:Ka,L:ru,m:Ga,M:eu,p:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:au,s:uu,S:nu,u:Ba,U:Wa,V:Ya,w:$a,W:Xa,x:function(t,e,r){return M(t,n,e,r)},X:function(t,e,n){return M(t,r,e,n)},y:Za,Y:Va,Z:Qa,"%":ou};function b(t,e){return function(n){var r,i,o,a=[],u=-1,s=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Pa[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function T(t,e){return function(n){var r,i,o=Ea(1900);if(M(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Aa(Ea(o.y))).getUTCDay(),r=i>4||0===i?_a.ceil(r):_a(r),r=Ca.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=e(Ea(o.y))).getDay(),r=i>4||0===i?ia.ceil(r):ia(r),r=fa.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Aa(Ea(o.y)).getUTCDay():e(Ea(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Aa(o)):e(o)}}function M(t,e,n,r){for(var i,o,a=0,u=e.length,s=n.length;a<u;){if(r>=s)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=w[i in Pa?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(m.x=b(n,m),m.X=b(r,m),m.c=b(e,m),x.x=b(n,x),x.X=b(r,x),x.c=b(e,x),{format:function(t){var e=b(t+="",m);return e.toString=function(){return t},e},parse:function(t){var e=T(t+="",Sa);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=T(t,Aa);return e.toString=function(){return t},e}})}(t),ja=Da.format,Da.parse,La=Da.utcFormat,qa=Da.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||La("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||qa("%Y-%m-%dT%H:%M:%S.%LZ");var Wu=Qo((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Yu=(Wu.range,Qo((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Xu=(Yu.range,Qo((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*ta)}),(function(t,e){return(e-t)/ta}),(function(t){return t.getUTCMinutes()})));Xu.range;var Vu=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},Zu=Vu("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Qu=Vu("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Gu=function(t){return function(){return t}},Ju=Math.abs,Ku=Math.atan2,ts=Math.cos,es=Math.max,ns=Math.min,rs=Math.sin,is=Math.sqrt,os=1e-12,as=Math.PI,us=as/2,ss=2*as;function cs(t){return t>=1?us:t<=-1?-us:Math.asin(t)}function ls(t){return t.innerRadius}function fs(t){return t.outerRadius}function hs(t){return t.startAngle}function ps(t){return t.endAngle}function ds(t){return t&&t.padAngle}function gs(t,e,n,r,i,o,a){var u=t-n,s=e-r,c=(a?o:-o)/is(u*u+s*s),l=c*s,f=-c*u,h=t+l,p=e+f,d=n+l,g=r+f,v=(h+d)/2,y=(p+g)/2,_=d-h,m=g-p,x=_*_+m*m,w=i-o,b=h*g-d*p,T=(m<0?-1:1)*is(es(0,w*w*x-b*b)),M=(b*m-_*T)/x,C=(-b*_-m*T)/x,N=(b*m+_*T)/x,k=(-b*_+m*T)/x,S=M-v,A=C-y,E=N-v,D=k-y;return S*S+A*A>E*E+D*D&&(M=N,C=k),{cx:M,cy:C,x01:-l,y01:-f,x11:M*(i/w-1),y11:C*(i/w-1)}}var vs=function(){var t=ls,e=fs,n=Gu(0),r=null,i=hs,o=ps,a=ds,u=null;function s(){var s,c,l,f=+t.apply(this,arguments),h=+e.apply(this,arguments),p=i.apply(this,arguments)-us,d=o.apply(this,arguments)-us,g=Ju(d-p),v=d>p;if(u||(u=s=Vn()),h<f&&(c=h,h=f,f=c),h>os)if(g>ss-os)u.moveTo(h*ts(p),h*rs(p)),u.arc(0,0,h,p,d,!v),f>os&&(u.moveTo(f*ts(d),f*rs(d)),u.arc(0,0,f,d,p,v));else{var y,_,m=p,x=d,w=p,b=d,T=g,M=g,C=a.apply(this,arguments)/2,N=C>os&&(r?+r.apply(this,arguments):is(f*f+h*h)),k=ns(Ju(h-f)/2,+n.apply(this,arguments)),S=k,A=k;if(N>os){var E=cs(N/f*rs(C)),D=cs(N/h*rs(C));(T-=2*E)>os?(w+=E*=v?1:-1,b-=E):(T=0,w=b=(p+d)/2),(M-=2*D)>os?(m+=D*=v?1:-1,x-=D):(M=0,m=x=(p+d)/2)}var j=h*ts(m),L=h*rs(m),q=f*ts(b),P=f*rs(b);if(k>os){var O,R=h*ts(x),H=h*rs(x),U=f*ts(w),F=f*rs(w);if(g<as&&(O=function(t,e,n,r,i,o,a,u){var s=n-t,c=r-e,l=a-i,f=u-o,h=f*s-l*c;if(!(h*h<os))return[t+(h=(l*(e-o)-f*(t-i))/h)*s,e+h*c]}(j,L,U,F,R,H,q,P))){var I=j-O[0],z=L-O[1],$=R-O[0],B=H-O[1],W=1/rs(((l=(I*$+z*B)/(is(I*I+z*z)*is($*$+B*B)))>1?0:l<-1?as:Math.acos(l))/2),Y=is(O[0]*O[0]+O[1]*O[1]);S=ns(k,(f-Y)/(W-1)),A=ns(k,(h-Y)/(W+1))}}M>os?A>os?(y=gs(U,F,j,L,h,A,v),_=gs(R,H,q,P,h,A,v),u.moveTo(y.cx+y.x01,y.cy+y.y01),A<k?u.arc(y.cx,y.cy,A,Ku(y.y01,y.x01),Ku(_.y01,_.x01),!v):(u.arc(y.cx,y.cy,A,Ku(y.y01,y.x01),Ku(y.y11,y.x11),!v),u.arc(0,0,h,Ku(y.cy+y.y11,y.cx+y.x11),Ku(_.cy+_.y11,_.cx+_.x11),!v),u.arc(_.cx,_.cy,A,Ku(_.y11,_.x11),Ku(_.y01,_.x01),!v))):(u.moveTo(j,L),u.arc(0,0,h,m,x,!v)):u.moveTo(j,L),f>os&&T>os?S>os?(y=gs(q,P,R,H,f,-S,v),_=gs(j,L,U,F,f,-S,v),u.lineTo(y.cx+y.x01,y.cy+y.y01),S<k?u.arc(y.cx,y.cy,S,Ku(y.y01,y.x01),Ku(_.y01,_.x01),!v):(u.arc(y.cx,y.cy,S,Ku(y.y01,y.x01),Ku(y.y11,y.x11),!v),u.arc(0,0,f,Ku(y.cy+y.y11,y.cx+y.x11),Ku(_.cy+_.y11,_.cx+_.x11),v),u.arc(_.cx,_.cy,S,Ku(_.y11,_.x11),Ku(_.y01,_.x01),!v))):u.arc(0,0,f,b,w,v):u.lineTo(q,P)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-as/2;return[ts(r)*n,rs(r)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Gu(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Gu(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Gu(+t),s):n},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Gu(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Gu(+t),s):i},s.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Gu(+t),s):o},s.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Gu(+t),s):a},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s};function ys(t){this._context=t}ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var _s=function(t){return new ys(t)};xs(_s);function ms(t){this._curve=t}function xs(t){function e(e){return new ms(t(e))}return e._curve=t,e}ms.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var ws=Math.sin(as/10)/Math.sin(7*as/10),bs=(Math.sin(ss/10),Math.cos(ss/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Ts(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Ms(t){this._context=t}Ms.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ts(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ts(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Cs(t){this._context=t}Cs.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Ts(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Ns(t){this._context=t}Ns.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Ts(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function ks(t,e){this._basis=new Ms(t),this._beta=e}ks.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,u=e[n]-o,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*a),this._beta*e[s]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new Ms(t):new ks(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function Ss(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function As(t,e){this._context=t,this._k=(1-e)/6}As.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ss(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Ss(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new As(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Es(t,e){this._context=t,this._k=(1-e)/6}Es.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Ss(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Es(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Ds(t,e){this._context=t,this._k=(1-e)/6}Ds.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ss(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Ds(t,e)}return n.tension=function(e){return t(+e)},n})(0);function js(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>os){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>os){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*c+t._x1*t._l23_2a-e*t._l12_2a)/l,a=(a*c+t._y1*t._l23_2a-n*t._l12_2a)/l}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Ls(t,e){this._context=t,this._alpha=e}Ls.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:js(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Ls(t,e):new As(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function qs(t,e){this._context=t,this._alpha=e}qs.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:js(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new qs(t,e):new Es(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Ps(t,e){this._context=t,this._alpha=e}Ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:js(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Ps(t,e):new Ds(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Os(t){this._context=t}Os.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function Rs(t){return t<0?-1:1}function Hs(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Rs(o)+Rs(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function Us(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Fs(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*e,o-u,a-u*n,o,a)}function Is(t){this._context=t}function zs(t){this._context=new $s(t)}function $s(t){this._context=t}function Bs(t){this._context=t}function Ws(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}Is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Fs(this,this._t0,Us(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Fs(this,Us(this,n=Hs(this,t,e)),n);break;default:Fs(this,this._t0,n=Hs(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(zs.prototype=Object.create(Is.prototype)).point=function(t,e){Is.prototype.point.call(this,e,t)},$s.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},Bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Ws(t),i=Ws(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function Ys(t,e){this._context=t,this._t=e}Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function Xs(){this._=null}function Vs(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Zs(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Qs(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Gs(t){for(;t.L;)t=t.L;return t}Xs.prototype={constructor:Xs,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Gs(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Zs(this,n),n=(t=n).U),n.C=!1,r.C=!0,Qs(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Qs(this,n),n=(t=n).U),n.C=!1,r.C=!0,Zs(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Gs(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Zs(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Qs(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Zs(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Qs(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Zs(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Qs(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Js=Xs;function Ks(t,e,n,r){var i=[null,null],o=Tc.push(i)-1;return i.left=t,i.right=e,n&&ec(i,t,e,n),r&&ec(i,e,t,r),wc[t.index].halfedges.push(o),wc[e.index].halfedges.push(o),i}function tc(t,e,n){var r=[e,n];return r.left=t,r}function ec(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function nc(t,e,n,r,i){var o,a=t[0],u=t[1],s=a[0],c=a[1],l=0,f=1,h=u[0]-s,p=u[1]-c;if(o=e-s,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-s,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=n-c,p||!(o>0)){if(o/=p,p<0){if(o<l)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>l&&(l=o)}if(o=i-c,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>l&&(l=o)}else if(p>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*h,c+l*p]),f<1&&(t[1]=[s+f*h,c+f*p]),!0)}}}}}function rc(t,e,n,r,i){var o=t[1];if(o)return!0;var a,u,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],p=l[0],d=l[1],g=(f+p)/2,v=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[g,n];o=[g,i]}else{if(s){if(s[1]<n)return}else s=[g,i];o=[g,n]}}else if(u=v-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(n-u)/a,n];o=[(i-u)/a,i]}else{if(s){if(s[1]<n)return}else s=[(i-u)/a,i];o=[(n-u)/a,n]}else if(h<d){if(s){if(s[0]>=r)return}else s=[e,a*e+u];o=[r,a*r+u]}else{if(s){if(s[0]<e)return}else s=[r,a*r+u];o=[e,a*e+u]}return t[0]=s,t[1]=o,!0}function ic(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function oc(t,e){return e[+(e.left!==t.site)]}function ac(t,e){return e[+(e.left===t.site)]}var uc,sc=[];function cc(){Vs(this),this.x=this.y=this.arc=this.site=this.cy=null}function lc(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],u=i[1],s=r[0]-a,c=r[1]-u,l=o[0]-a,f=o[1]-u,h=2*(s*f-c*l);if(!(h>=-Cc)){var p=s*s+c*c,d=l*l+f*f,g=(f*p-c*d)/h,v=(s*d-l*p)/h,y=sc.pop()||new cc;y.arc=t,y.site=i,y.x=g+a,y.y=(y.cy=v+u)+Math.sqrt(g*g+v*v),t.circle=y;for(var _=null,m=bc._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){_=m.P;break}m=m.L}else{if(!m.R){_=m;break}m=m.R}bc.insert(_,y),_||(uc=y)}}}}function fc(t){var e=t.circle;e&&(e.P||(uc=e.N),bc.remove(e),sc.push(e),Vs(e),t.circle=null)}var hc=[];function pc(){Vs(this),this.edge=this.site=this.circle=null}function dc(t){var e=hc.pop()||new pc;return e.site=t,e}function gc(t){fc(t),xc.remove(t),hc.push(t),Vs(t)}function vc(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,u=[t];gc(t);for(var s=o;s.circle&&Math.abs(n-s.circle.x)<Mc&&Math.abs(r-s.circle.cy)<Mc;)o=s.P,u.unshift(s),gc(s),s=o;u.unshift(s),fc(s);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<Mc&&Math.abs(r-c.circle.cy)<Mc;)a=c.N,u.push(c),gc(c),c=a;u.push(c),fc(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],ec(c.edge,s.site,c.site,i);s=u[0],(c=u[f-1]).edge=Ks(s.site,c.site,null,i),lc(s),lc(c)}function yc(t){for(var e,n,r,i,o=t[0],a=t[1],u=xc._;u;)if((r=_c(u,a)-o)>Mc)u=u.L;else{if(!((i=o-mc(u,a))>Mc)){r>-Mc?(e=u.P,n=u):i>-Mc?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}!function(t){wc[t.index]={site:t,halfedges:[]}}(t);var s=dc(t);if(xc.insert(e,s),e||n){if(e===n)return fc(e),n=dc(e.site),xc.insert(s,n),s.edge=n.edge=Ks(e.site,s.site),lc(e),void lc(n);if(n){fc(e),fc(n);var c=e.site,l=c[0],f=c[1],h=t[0]-l,p=t[1]-f,d=n.site,g=d[0]-l,v=d[1]-f,y=2*(h*v-p*g),_=h*h+p*p,m=g*g+v*v,x=[(v*_-p*m)/y+l,(h*m-g*_)/y+f];ec(n.edge,c,d,x),s.edge=Ks(c,t,null,x),n.edge=Ks(t,d,null,x),lc(e),lc(n)}else s.edge=Ks(e.site,s.site)}}function _c(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(n=a.site)[0],s=n[1],c=s-e;if(!c)return u;var l=u-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+u)/2}function mc(t,e){var n=t.N;if(n)return _c(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var xc,wc,bc,Tc,Mc=1e-6,Cc=1e-12;function Nc(t,e){return e[1]-t[1]||e[0]-t[0]}function kc(t,e){var n,r,i,o=t.sort(Nc).pop();for(Tc=[],wc=new Array(t.length),xc=new Js,bc=new Js;;)if(i=uc,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(yc(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;vc(i.arc)}if(function(){for(var t,e,n,r,i=0,o=wc.length;i<o;++i)if((t=wc[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(n=0;n<r;++n)a[n]=n,u[n]=ic(t,Tc[e[n]]);for(a.sort((function(t,e){return u[e]-u[t]})),n=0;n<r;++n)u[n]=e[a[n]];for(n=0;n<r;++n)e[n]=u[n]}}(),e){var a=+e[0][0],u=+e[0][1],s=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var i,o=Tc.length;o--;)rc(i=Tc[o],t,e,n,r)&&nc(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Mc||Math.abs(i[0][1]-i[1][1])>Mc)||delete Tc[o]}(a,u,s,c),function(t,e,n,r){var i,o,a,u,s,c,l,f,h,p,d,g,v=wc.length,y=!0;for(i=0;i<v;++i)if(o=wc[i]){for(a=o.site,u=(s=o.halfedges).length;u--;)Tc[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)d=(p=ac(o,Tc[s[u]]))[0],g=p[1],f=(l=oc(o,Tc[s[++u%c]]))[0],h=l[1],(Math.abs(d-f)>Mc||Math.abs(g-h)>Mc)&&(s.splice(u,0,Tc.push(tc(a,p,Math.abs(d-t)<Mc&&r-g>Mc?[t,Math.abs(f-t)<Mc?h:r]:Math.abs(g-r)<Mc&&n-d>Mc?[Math.abs(h-r)<Mc?f:n,r]:Math.abs(d-n)<Mc&&g-e>Mc?[n,Math.abs(f-n)<Mc?h:e]:Math.abs(g-e)<Mc&&d-t>Mc?[Math.abs(h-e)<Mc?f:t,e]:null))-1),++c);c&&(y=!1)}if(y){var _,m,x,w=1/0;for(i=0,y=null;i<v;++i)(o=wc[i])&&(x=(_=(a=o.site)[0]-t)*_+(m=a[1]-e)*m)<w&&(w=x,y=o);if(y){var b=[t,e],T=[t,r],M=[n,r],C=[n,e];y.halfedges.push(Tc.push(tc(a=y.site,b,T))-1,Tc.push(tc(a,T,M))-1,Tc.push(tc(a,M,C))-1,Tc.push(tc(a,C,b))-1)}}for(i=0;i<v;++i)(o=wc[i])&&(o.halfedges.length||delete wc[i])}(a,u,s,c)}this.edges=Tc,this.cells=wc,xc=bc=Tc=wc=null}kc.prototype={constructor:kc,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return oc(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,u,s,c,l=n.site,f=-1,h=e[i[o-1]],p=h.left===l?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===l?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(s=a,c=p,((u=l)[0]-c[0])*(s[1]-u[1])-(u[0]-s[0])*(c[1]-u[1])<0)&&t.push([l.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var s=t-i.site[0],c=e-i.site[1],l=s*s+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],u=r.left;if(u!==i.site&&u||(u=r.right)){var s=t-u[0],c=e-u[1],f=s*s+c*c;f<l&&(l=f,a=u.index)}}))}while(null!==a);return o._found=r,null==n||l<=n*n?i.site:null}};function Sc(t,e,n){this.k=t,this.x=e,this.y=n}Sc.prototype={constructor:Sc,scale:function(t){return 1===t?this:new Sc(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Sc(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Sc(1,0,0);Sc.prototype;n.d(e,"n",(function(){return v})),n.d(e,"o",(function(){return _})),n.d(e,"d",(function(){return j})),n.d(e,"b",(function(){return L})),n.d(e,"c",(function(){return q})),n.d(e,"p",(function(){return xt})),n.d(e,"e",(function(){return K})),n.d(e,"g",(function(){return dr})),n.d(e,"h",(function(){return kr})),n.d(e,"i",(function(){return Er})),n.d(e,"j",(function(){return Or})),n.d(e,"k",(function(){return Pr})),n.d(e,"l",(function(){return Rr})),n.d(e,"m",(function(){return Hr})),n.d(e,"q",(function(){return So})),n.d(e,"r",(function(){return zo})),n.d(e,"s",(function(){return ko})),n.d(e,"t",(function(){return Xo})),n.d(e,"u",(function(){return Zu})),n.d(e,"v",(function(){return Qu})),n.d(e,"w",(function(){return z.f})),n.d(e,"f",(function(){return z.b})),n.d(e,"a",(function(){return vs})),n.d(e,"x",(function(){return ja}))},49:function(t,e,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=n.document,u=Object.getPrototypeOf,s=o.slice,c=o.concat,l=o.push,f=o.indexOf,h={},p=h.toString,d=h.hasOwnProperty,g=d.toString,v=g.call(Object),y={},_=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},m=function(t){return null!=t&&t===t.window},x={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var r,i,o=(n=n||a).createElement("script");if(o.text=t,e)for(r in x)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var T=function(t,e){return new T.fn.init(t,e)},M=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!_(t)&&!m(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}T.fn=T.prototype={jquery:"3.4.1",constructor:T,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(t){return this.pushStack(T.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},u=1,s=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[u]||{},u++),"object"==typeof a||_(a)||(a={}),u===s&&(a=this,u--);u<s;u++)if(null!=(t=arguments[u]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(c&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,a[e]=T.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},T.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=u(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&g.call(n)===v)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){w(t,{nonce:e&&e.nonce})},each:function(t,e){var n,r=0;if(C(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(M,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?T.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(C(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return c.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){h["[object "+e+"]"]=e.toLowerCase()}));var N=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,r,i,o,a,u,s,c,l,f,h,p,d,g,v,y,_,m,x="sizzle"+1*new Date,w=t.document,b=0,T=0,M=st(),C=st(),N=st(),k=st(),S=function(t,e){return t===e&&(f=!0),0},A={}.hasOwnProperty,E=[],D=E.pop,j=E.push,L=E.push,q=E.slice,P=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",U="\\["+R+"*("+H+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+R+"*\\]",F=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",I=new RegExp(R+"+","g"),z=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),$=new RegExp("^"+R+"*,"+R+"*"),B=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),W=new RegExp(R+"|>"),Y=new RegExp(F),X=new RegExp("^"+H+"$"),V={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),nt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},rt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){h()},at=xt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(E=q.call(w.childNodes),w.childNodes),E[w.childNodes.length].nodeType}catch(t){L={apply:E.length?function(t,e){j.apply(t,q.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function ut(t,e,r,i){var o,u,c,l,f,d,y,_=e&&e.ownerDocument,b=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==b&&9!==b&&11!==b)return r;if(!i&&((e?e.ownerDocument||e:w)!==p&&h(e),e=e||p,g)){if(11!==b&&(f=K.exec(t)))if(o=f[1]){if(9===b){if(!(c=e.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(_&&(c=_.getElementById(o))&&m(e,c)&&c.id===o)return r.push(c),r}else{if(f[2])return L.apply(r,e.getElementsByTagName(t)),r;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return L.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!k[t+" "]&&(!v||!v.test(t))&&(1!==b||"object"!==e.nodeName.toLowerCase())){if(y=t,_=e,1===b&&W.test(t)){for((l=e.getAttribute("id"))?l=l.replace(rt,it):e.setAttribute("id",l=x),u=(d=a(t)).length;u--;)d[u]="#"+l+" "+mt(d[u]);y=d.join(","),_=tt.test(t)&&yt(e.parentNode)||e}try{return L.apply(r,_.querySelectorAll(y)),r}catch(e){k(t,!0)}finally{l===x&&e.removeAttribute("id")}}}return s(t.replace(z,"$1"),e,r,i)}function st(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function ct(t){return t[x]=!0,t}function lt(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function vt(t){return ct((function(e){return e=+e,ct((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function yt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ut.support={},o=ut.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!Z.test(e||n&&n.nodeName||"HTML")},h=ut.setDocument=function(t){var e,i,a=t?t.ownerDocument||t:w;return a!==p&&9===a.nodeType&&a.documentElement?(d=(p=a).documentElement,g=!o(p),w!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ot,!1):i.attachEvent&&i.attachEvent("onunload",ot)),n.attributes=lt((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=lt((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=lt((function(t){return d.appendChild(t).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},y=[],v=[],(n.qsa=J.test(p.querySelectorAll))&&(lt((function(t){d.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+R+"*(?:value|"+O+")"),t.querySelectorAll("[id~="+x+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||v.push(".#.+[+~]")})),lt((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=J.test(_=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&lt((function(t){n.disconnectedMatch=_.call(t,"*"),_.call(t,"[s!='']:x"),y.push("!=",F)})),v=v.length&&new RegExp(v.join("|")),y=y.length&&new RegExp(y.join("|")),e=J.test(d.compareDocumentPosition),m=e||J.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},S=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===w&&m(w,t)?-1:e===p||e.ownerDocument===w&&m(w,e)?1:l?P(l,t)-P(l,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,a=[t],u=[e];if(!i||!o)return t===p?-1:e===p?1:i?-1:o?1:l?P(l,t)-P(l,e):0;if(i===o)return ht(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?ht(a[r],u[r]):a[r]===w?-1:u[r]===w?1:0},p):p},ut.matches=function(t,e){return ut(t,null,null,e)},ut.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),n.matchesSelector&&g&&!k[e+" "]&&(!y||!y.test(e))&&(!v||!v.test(e)))try{var r=_.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){k(e,!0)}return ut(e,p,null,[t]).length>0},ut.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),m(t,e)},ut.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var i=r.attrHandle[e.toLowerCase()],o=i&&A.call(r.attrHandle,e.toLowerCase())?i(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},ut.escape=function(t){return(t+"").replace(rt,it)},ut.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ut.uniqueSort=function(t){var e,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(S),f){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return l=null,t},i=ut.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=ut.selectors={cacheLength:50,createPseudo:ct,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ut.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ut.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&Y.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=M[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&M(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=ut.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(I," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),u="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,s){var c,l,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,y=u&&e.nodeName.toLowerCase(),_=!s&&!u,m=!1;if(v){if(o){for(;g;){for(h=e;h=h[g];)if(u?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?v.firstChild:v.lastChild],a&&_){for(m=(p=(c=(l=(f=(h=v)[x]||(h[x]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===b&&c[1])&&c[2],h=p&&v.childNodes[p];h=++p&&h&&h[g]||(m=p=0)||d.pop();)if(1===h.nodeType&&++m&&h===e){l[t]=[b,p,m];break}}else if(_&&(m=p=(c=(l=(f=(h=e)[x]||(h[x]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===b&&c[1]),!1===m)for(;(h=++p&&h&&h[g]||(m=p=0)||d.pop())&&((u?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++m||(_&&((l=(f=h[x]||(h[x]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[b,m]),h!==e)););return(m-=i)===r||m%r==0&&m/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||ut.error("unsupported pseudo: "+t);return i[x]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=P(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:ct((function(t){var e=[],n=[],r=u(t.replace(z,"$1"));return r[x]?ct((function(t,e,n,i){for(var o,a=r(t,null,i,[]),u=t.length;u--;)(o=a[u])&&(t[u]=!(e[u]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:ct((function(t){return function(e){return ut(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||i(e)).indexOf(t)>-1}})),lang:ct((function(t){return X.test(t||"")||ut.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:vt((function(){return[0]})),last:vt((function(t,e){return[e-1]})),eq:vt((function(t,e,n){return[n<0?n+e:n]})),even:vt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:vt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:vt((function(t,e,n){for(var r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:vt((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=dt(e);function _t(){}function mt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function xt(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,u=T++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,s){var c,l,f,h=[b,u];if(s){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,s))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(l=(f=e[x]||(e[x]={}))[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=l[o])&&c[0]===b&&c[1]===u)return h[2]=c[2];if(l[o]=h,h[2]=t(e,n,s))return!0}return!1}}function wt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function bt(t,e,n,r,i){for(var o,a=[],u=0,s=t.length,c=null!=e;u<s;u++)(o=t[u])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(u)));return a}function Tt(t,e,n,r,i,o){return r&&!r[x]&&(r=Tt(r)),i&&!i[x]&&(i=Tt(i,o)),ct((function(o,a,u,s){var c,l,f,h=[],p=[],d=a.length,g=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)ut(t,e[r],n);return n}(e||"*",u.nodeType?[u]:u,[]),v=!t||!o&&e?g:bt(g,h,t,u,s),y=n?i||(o?t:d||r)?[]:a:v;if(n&&n(v,y,u,s),r)for(c=bt(y,p),r(c,[],u,s),l=c.length;l--;)(f=c[l])&&(y[p[l]]=!(v[p[l]]=f));if(o){if(i||t){if(i){for(c=[],l=y.length;l--;)(f=y[l])&&c.push(v[l]=f);i(null,y=[],c,s)}for(l=y.length;l--;)(f=y[l])&&(c=i?P(o,f):h[l])>-1&&(o[c]=!(a[c]=f))}}else y=bt(y===a?y.splice(d,y.length):y),i?i(null,a,y,s):L.apply(a,y)}))}function Mt(t){for(var e,n,i,o=t.length,a=r.relative[t[0].type],u=a||r.relative[" "],s=a?1:0,l=xt((function(t){return t===e}),u,!0),f=xt((function(t){return P(e,t)>-1}),u,!0),h=[function(t,n,r){var i=!a&&(r||n!==c)||((e=n).nodeType?l(t,n,r):f(t,n,r));return e=null,i}];s<o;s++)if(n=r.relative[t[s].type])h=[xt(wt(h),n)];else{if((n=r.filter[t[s].type].apply(null,t[s].matches))[x]){for(i=++s;i<o&&!r.relative[t[i].type];i++);return Tt(s>1&&wt(h),s>1&&mt(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(z,"$1"),n,s<i&&Mt(t.slice(s,i)),i<o&&Mt(t=t.slice(i)),i<o&&mt(t))}h.push(n)}return wt(h)}return _t.prototype=r.filters=r.pseudos,r.setFilters=new _t,a=ut.tokenize=function(t,e){var n,i,o,a,u,s,c,l=C[t+" "];if(l)return e?0:l.slice(0);for(u=t,s=[],c=r.preFilter;u;){for(a in n&&!(i=$.exec(u))||(i&&(u=u.slice(i[0].length)||u),s.push(o=[])),n=!1,(i=B.exec(u))&&(n=i.shift(),o.push({value:n,type:i[0].replace(z," ")}),u=u.slice(n.length)),r.filter)!(i=V[a].exec(u))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),u=u.slice(n.length));if(!n)break}return e?u.length:u?ut.error(t):C(t,s).slice(0)},u=ut.compile=function(t,e){var n,i=[],o=[],u=N[t+" "];if(!u){for(e||(e=a(t)),n=e.length;n--;)(u=Mt(e[n]))[x]?i.push(u):o.push(u);(u=N(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,a,u,s,l){var f,d,v,y=0,_="0",m=o&&[],x=[],w=c,T=o||i&&r.find.TAG("*",l),M=b+=null==w?1:Math.random()||.1,C=T.length;for(l&&(c=a===p||a||l);_!==C&&null!=(f=T[_]);_++){if(i&&f){for(d=0,a||f.ownerDocument===p||(h(f),u=!g);v=t[d++];)if(v(f,a||p,u)){s.push(f);break}l&&(b=M)}n&&((f=!v&&f)&&y--,o&&m.push(f))}if(y+=_,n&&_!==y){for(d=0;v=e[d++];)v(m,x,a,u);if(o){if(y>0)for(;_--;)m[_]||x[_]||(x[_]=D.call(s));x=bt(x)}L.apply(s,x),l&&!o&&x.length>0&&y+e.length>1&&ut.uniqueSort(s)}return l&&(b=M,c=w),m};return n?ct(o):o}(o,i))).selector=t}return u},s=ut.select=function(t,e,n,i){var o,s,c,l,f,h="function"==typeof t&&t,p=!i&&a(t=h.selector||t);if(n=n||[],1===p.length){if((s=p[0]=p[0].slice(0)).length>2&&"ID"===(c=s[0]).type&&9===e.nodeType&&g&&r.relative[s[1].type]){if(!(e=(r.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=V.needsContext.test(t)?0:s.length;o--&&(c=s[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(et,nt),tt.test(s[0].type)&&yt(e.parentNode)||e))){if(s.splice(o,1),!(t=i.length&&mt(s)))return L.apply(n,i),n;break}}return(h||u(t,p))(i,e,!g,n,!e||tt.test(t)&&yt(e.parentNode)||e),n},n.sortStable=x.split("").sort(S).join("")===x,n.detectDuplicates=!!f,h(),n.sortDetached=lt((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),lt((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ft("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&lt((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ft("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),lt((function(t){return null==t.getAttribute("disabled")}))||ft(O,(function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null})),ut}(n);T.find=N,T.expr=N.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=N.uniqueSort,T.text=N.getText,T.isXMLDoc=N.isXML,T.contains=N.contains,T.escapeSelector=N.escape;var k=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&T(t).is(n))break;r.push(t)}return r},S=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},A=T.expr.match.needsContext;function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(t,e,n){return _(e)?T.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?T.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?T.grep(t,(function(t){return f.call(e,t)>-1!==n})):T.filter(e,t,n)}T.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?T.find.matchesSelector(r,t)?[r]:[]:T.find.matches(t,T.grep(e,(function(t){return 1===t.nodeType})))},T.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(T(t).filter((function(){for(e=0;e<r;e++)if(T.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)T.find(t,i[e],n);return r>1?T.uniqueSort(n):n},filter:function(t){return this.pushStack(j(this,t||[],!1))},not:function(t){return this.pushStack(j(this,t||[],!0))},is:function(t){return!!j(this,"string"==typeof t&&A.test(t)?T(t):t||[],!1).length}});var L,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||L,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:q.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),D.test(r[1])&&T.isPlainObject(e))for(r in e)_(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):_(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,L=T(a);var P=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&T(t);if(!A.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(T(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return k(t,"parentNode")},parentsUntil:function(t,e,n){return k(t,"parentNode",n)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return k(t,"nextSibling")},prevAll:function(t){return k(t,"previousSibling")},nextUntil:function(t,e,n){return k(t,"nextSibling",n)},prevUntil:function(t,e,n){return k(t,"previousSibling",n)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(E(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},(function(t,e){T.fn[t]=function(n,r){var i=T.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(O[t]||T.uniqueSort(i),P.test(t)&&i.reverse()),this.pushStack(i)}}));var H=/[^\x20\t\r\n\f]+/g;function U(t){return t}function F(t){throw t}function I(t,e,n,r){var i;try{t&&_(i=t.promise)?i.call(t).done(e).fail(n):t&&_(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return T.each(t.match(H)||[],(function(t,n){e[n]=!0})),e}(t):T.extend({},t);var e,n,r,i,o=[],a=[],u=-1,s=function(){for(i=i||t.once,r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(u=o.length-1,a.push(n)),function e(n){T.each(n,(function(n,r){_(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&s()),this},remove:function(){return T.each(arguments,(function(t,e){for(var n;(n=T.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--})),this},has:function(t){return t?T.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||s()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},T.extend({Deferred:function(t){var e=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return T.Deferred((function(n){T.each(e,(function(e,r){var i=_(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&_(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(t,r,i){var o=0;function a(t,e,r,i){return function(){var u=this,s=arguments,c=function(){var n,c;if(!(t<o)){if((n=r.apply(u,s))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,_(c)?i?c.call(n,a(o,e,U,i),a(o,e,F,i)):(o++,c.call(n,a(o,e,U,i),a(o,e,F,i),a(o,e,U,e.notifyWith))):(r!==U&&(u=void 0,s=[n]),(i||e.resolveWith)(u,s))}},l=i?c:function(){try{c()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,l.stackTrace),t+1>=o&&(r!==F&&(u=void 0,s=[n]),e.rejectWith(u,s))}};t?l():(T.Deferred.getStackHook&&(l.stackTrace=T.Deferred.getStackHook()),n.setTimeout(l))}}return T.Deferred((function(n){e[0][3].add(a(0,n,_(i)?i:U,n.notifyWith)),e[1][3].add(a(0,n,_(t)?t:U)),e[2][3].add(a(0,n,_(r)?r:F))})).promise()},promise:function(t){return null!=t?T.extend(t,i):i}},o={};return T.each(e,(function(t,n){var a=n[2],u=n[5];i[n[1]]=a.add,u&&a.add((function(){r=u}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=s.call(arguments),o=T.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?s.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(I(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||_(i[n]&&i[n].then)))return o.then();for(;n--;)I(i[n],a(n),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&z.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){n.setTimeout((function(){throw t}))};var $=T.Deferred();function B(){a.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),T.ready()}T.fn.ready=function(t){return $.then(t).catch((function(t){T.readyException(t)})),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==t&&--T.readyWait>0||$.resolveWith(a,[T]))}}),T.ready.then=$.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(T.ready):(a.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var W=function(t,e,n,r,i,o,a){var u=0,s=t.length,c=null==n;if("object"===b(n))for(u in i=!0,n)W(t,e,u,n[u],!0,o,a);else if(void 0!==r&&(i=!0,_(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(T(t),n)})),e))for(;u<s;u++)e(t[u],n,a?r:r.call(t[u],u,e(t[u],n)));return i?t:c?e.call(t):s?e(t[0],n):o},Y=/^-ms-/,X=/-([a-z])/g;function V(t,e){return e.toUpperCase()}function Z(t){return t.replace(Y,"ms-").replace(X,V)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=T.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[Z(e)]=n;else for(r in e)i[Z(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][Z(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(Z):(e=Z(e))in r?[e]:e.match(H)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||T.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var J=new G,K=new G,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}K.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return K.hasData(t)||J.hasData(t)},data:function(t,e,n){return K.access(t,e,n)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),T.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Z(r.slice(5)),nt(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){K.set(this,t)})):W(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=K.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each((function(){K.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){K.remove(this,t)}))}}),T.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=J.get(t,e),n&&(!r||Array.isArray(n)?r=J.access(t,e,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),r=n.length,i=n.shift(),o=T._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){T.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:T.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",n])}))})}}),T.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?T.queue(this[0],t):void 0===e?this:this.each((function(){var n=T.queue(this,t,e);T._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&T.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){T.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=T.Deferred(),o=this,a=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=J.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=a.documentElement,ut=function(t){return T.contains(t.ownerDocument,t)},st={composed:!0};at.getRootNode&&(ut=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(st)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&ut(t)&&"none"===T.css(t,"display")},lt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=a[o];return i};function ft(t,e,n,r){var i,o,a=20,u=r?function(){return r.cur()}:function(){return T.css(t,e,"")},s=u(),c=n&&n[3]||(T.cssNumber[e]?"":"px"),l=t.nodeType&&(T.cssNumber[e]||"px"!==c&&+s)&&it.exec(T.css(t,e));if(l&&l[3]!==c){for(s/=2,c=c||l[3],l=+s||1;a--;)T.style(t,e,l+c),(1-o)*(1-(o=u()/s||.5))<=0&&(a=0),l/=o;l*=2,T.style(t,e,l+c),n=n||[]}return n&&(l=+l||+s||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var ht={};function pt(t){var e,n=t.ownerDocument,r=t.nodeName,i=ht[r];return i||(e=n.body.appendChild(n.createElement(r)),i=T.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ht[r]=i,i)}function dt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ct(r)&&(i[o]=pt(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}T.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?T(this).show():T(this).hide()}))}});var gt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,yt=/^$|^module$|\/(?:java|ecma)script/i,_t={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&E(t,e)?T.merge([t],n):n}function xt(t,e){for(var n=0,r=t.length;n<r;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}_t.optgroup=_t.option,_t.tbody=_t.tfoot=_t.colgroup=_t.caption=_t.thead,_t.th=_t.td;var wt,bt,Tt=/<|&#?\w+;/;function Mt(t,e,n,r,i){for(var o,a,u,s,c,l,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===b(o))T.merge(h,o.nodeType?[o]:o);else if(Tt.test(o)){for(a=a||f.appendChild(e.createElement("div")),u=(vt.exec(o)||["",""])[1].toLowerCase(),s=_t[u]||_t._default,a.innerHTML=s[1]+T.htmlPrefilter(o)+s[2],l=s[0];l--;)a=a.lastChild;T.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(c=ut(o),a=mt(f.appendChild(o),"script"),c&&xt(a),n)for(l=0;o=a[l++];)yt.test(o.type||"")&&n.push(o);return f}wt=a.createDocumentFragment().appendChild(a.createElement("div")),(bt=a.createElement("input")).setAttribute("type","radio"),bt.setAttribute("checked","checked"),bt.setAttribute("name","t"),wt.appendChild(bt),y.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,Nt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,kt=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function At(){return!1}function Et(t,e){return t===function(){try{return a.activeElement}catch(t){}}()==("focus"===e)}function Dt(t,e,n,r,i,o){var a,u;if("object"==typeof e){for(u in"string"!=typeof n&&(r=r||n,n=void 0),e)Dt(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=At;else if(!i)return t;return 1===o&&(a=i,(i=function(t){return T().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),t.each((function(){T.event.add(this,e,i,r,n)}))}function jt(t,e,n){n?(J.set(t,e,!1),T.event.add(t,e,{namespace:!1,handler:function(t){var r,i,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(T.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=s.call(arguments),J.set(this,e,o),r=n(this,e),this[e](),o!==(i=J.get(this,e))||r?J.set(this,e,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(J.set(this,e,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&T.event.add(t,e,St)}T.event={global:{},add:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,g,v=J.get(t);if(v)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(at,i),n.guid||(n.guid=T.guid++),(s=v.events)||(s=v.events={}),(a=v.handle)||(a=v.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)p=g=(u=kt.exec(e[c])||[])[1],d=(u[2]||"").split(".").sort(),p&&(f=T.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=T.event.special[p]||{},l=T.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=s[p])||((h=s[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),T.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,g,v=J.hasData(t)&&J.get(t);if(v&&(s=v.events)){for(c=(e=(e||"").match(H)||[""]).length;c--;)if(p=g=(u=kt.exec(e[c])||[])[1],d=(u[2]||"").split(".").sort(),p){for(f=T.event.special[p]||{},h=s[p=(r?f.delegateType:f.bindType)||p]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)l=h[o],!i&&g!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,v.handle)||T.removeEvent(t,p,v.handle),delete s[p])}else for(p in s)T.event.remove(t,p+e[c],n,r,!0);T.isEmptyObject(s)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,u=T.event.fix(t),s=new Array(arguments.length),c=(J.get(this,"events")||{})[u.type]||[],l=T.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(a=T.event.handlers.call(this,u,c),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,u=[],s=e.delegateCount,c=t.target;if(s&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],a={},n=0;n<s;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?T(i,this).index(c)>-1:T.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&u.push({elem:c,handlers:o})}return c=this,s<e.length&&u.push({elem:c,handlers:e.slice(s)}),u},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:_(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&E(e,"input")&&jt(e,"click",St),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&E(e,"input")&&jt(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&E(e,"input")&&J.get(e,"click")||E(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Nt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(t,e){T.event.special[t]={setup:function(){return jt(this,t,Et),!1},trigger:function(){return jt(this,t),!0},delegateType:e}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){T.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||T.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),T.fn.extend({on:function(t,e,n,r){return Dt(this,t,e,n,r)},one:function(t,e,n,r){return Dt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,T(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=At),this.each((function(){T.event.remove(this,t,n,e)}))}});var Lt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qt=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Rt(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ut(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,r,i,o,a,u,s,c;if(1===e.nodeType){if(J.hasData(t)&&(o=J.access(t),a=J.set(e,o),c=o.events))for(i in delete a.handle,a.events={},c)for(n=0,r=c[i].length;n<r;n++)T.event.add(e,i,c[i][n]);K.hasData(t)&&(u=K.access(t),s=T.extend({},u),K.set(e,s))}}function It(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function zt(t,e,n,r){e=c.apply([],e);var i,o,a,u,s,l,f=0,h=t.length,p=h-1,d=e[0],g=_(d);if(g||h>1&&"string"==typeof d&&!y.checkClone&&Pt.test(d))return t.each((function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),zt(o,e,n,r)}));if(h&&(o=(i=Mt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(a=T.map(mt(i,"script"),Ht)).length;f<h;f++)s=i,f!==p&&(s=T.clone(s,!0,!0),u&&T.merge(a,mt(s,"script"))),n.call(t[f],s,f);if(u)for(l=a[a.length-1].ownerDocument,T.map(a,Ut),f=0;f<u;f++)s=a[f],yt.test(s.type||"")&&!J.access(s,"globalEval")&&T.contains(l,s)&&(s.src&&"module"!==(s.type||"").toLowerCase()?T._evalUrl&&!s.noModule&&T._evalUrl(s.src,{nonce:s.nonce||s.getAttribute("nonce")}):w(s.textContent.replace(Ot,""),s,l))}return t}function $t(t,e,n){for(var r,i=e?T.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(mt(r)),r.parentNode&&(n&&ut(r)&&xt(mt(r,"script")),r.parentNode.removeChild(r));return t}T.extend({htmlPrefilter:function(t){return t.replace(Lt,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,u=t.cloneNode(!0),s=ut(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(a=mt(u),r=0,i=(o=mt(t)).length;r<i;r++)It(o[r],a[r]);if(e)if(n)for(o=o||mt(t),a=a||mt(u),r=0,i=o.length;r<i;r++)Ft(o[r],a[r]);else Ft(t,u);return(a=mt(u,"script")).length>0&&xt(a,!s&&mt(t,"script")),u},cleanData:function(t){for(var e,n,r,i=T.event.special,o=0;void 0!==(n=t[o]);o++)if(Q(n)){if(e=n[J.expando]){if(e.events)for(r in e.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,e.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),T.fn.extend({detach:function(t){return $t(this,t,!0)},remove:function(t){return $t(this,t)},text:function(t){return W(this,(function(t){return void 0===t?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return zt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)}))},prepend:function(){return zt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return zt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return zt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return T.clone(this,t,e)}))},html:function(t){return W(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!qt.test(t)&&!_t[(vt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return zt(this,arguments,(function(e){var n=this.parentNode;T.inArray(this,t)<0&&(T.cleanData(mt(this)),n&&n.replaceChild(e,this))}),t)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){T.fn[t]=function(t){for(var n,r=[],i=T(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(i[a])[e](n),l.apply(r,n.get());return this.pushStack(r)}}));var Bt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Wt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Yt=new RegExp(ot.join("|"),"i");function Xt(t,e,n){var r,i,o,a,u=t.style;return(n=n||Wt(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||ut(t)||(a=T.style(t,e)),!y.pixelBoxStyles()&&Bt.test(a)&&Yt.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function Vt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",at.appendChild(c).appendChild(l);var t=n.getComputedStyle(l);r="1%"!==t.top,s=12===e(t.marginLeft),l.style.right="60%",u=36===e(t.right),i=36===e(t.width),l.style.position="absolute",o=12===e(l.offsetWidth/3),at.removeChild(c),l=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,u,s,c=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(y,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),u},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),s},scrollboxSize:function(){return t(),o}}))}();var Zt=["Webkit","Moz","ms"],Qt=a.createElement("div").style,Gt={};function Jt(t){var e=T.cssProps[t]||Gt[t];return e||(t in Qt?t:Gt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in Qt)return t}(t)||t)}var Kt=/^(none|table(?!-c[ea]).+)/,te=/^--/,ee={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"};function re(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function ie(t,e,n,r,i,o){var a="width"===e?1:0,u=0,s=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(s+=T.css(t,n+ot[a],!0,i)),r?("content"===n&&(s-=T.css(t,"padding"+ot[a],!0,i)),"margin"!==n&&(s-=T.css(t,"border"+ot[a]+"Width",!0,i))):(s+=T.css(t,"padding"+ot[a],!0,i),"padding"!==n?s+=T.css(t,"border"+ot[a]+"Width",!0,i):u+=T.css(t,"border"+ot[a]+"Width",!0,i));return!r&&o>=0&&(s+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-s-u-.5))||0),s}function oe(t,e,n){var r=Wt(t),i=(!y.boxSizingReliable()||n)&&"border-box"===T.css(t,"boxSizing",!1,r),o=i,a=Xt(t,e,r),u="offset"+e[0].toUpperCase()+e.slice(1);if(Bt.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===T.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===T.css(t,"boxSizing",!1,r),(o=u in t)&&(a=t[u])),(a=parseFloat(a)||0)+ie(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ae(t,e,n,r,i){return new ae.prototype.init(t,e,n,r,i)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Xt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,u=Z(e),s=te.test(e),c=t.style;if(s||(e=Jt(u)),a=T.cssHooks[e]||T.cssHooks[u],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:c[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ft(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||s||(n+=i&&i[3]||(T.cssNumber[u]?"":"px")),y.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(s?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var i,o,a,u=Z(e);return te.test(e)||(e=Jt(u)),(a=T.cssHooks[e]||T.cssHooks[u])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Xt(t,e,r)),"normal"===i&&e in ne&&(i=ne[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(t,e){T.cssHooks[e]={get:function(t,n,r){if(n)return!Kt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?oe(t,e,r):lt(t,ee,(function(){return oe(t,e,r)}))},set:function(t,n,r){var i,o=Wt(t),a=!y.scrollboxSize()&&"absolute"===o.position,u=(a||r)&&"border-box"===T.css(t,"boxSizing",!1,o),s=r?ie(t,e,r,u,o):0;return u&&a&&(s-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),s&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=T.css(t,e)),re(0,n,s)}}})),T.cssHooks.marginLeft=Vt(y.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Xt(t,"marginLeft"))||t.getBoundingClientRect().left-lt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(t,e){T.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(T.cssHooks[t+e].set=re)})),T.fn.extend({css:function(t,e){return W(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Wt(t),i=e.length;a<i;a++)o[e[a]]=T.css(t,e[a],!1,r);return o}return void 0!==n?T.style(t,e,n):T.css(t,e)}),t,e,arguments.length>1)}}),T.Tween=ae,ae.prototype={constructor:ae,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var t=ae.propHooks[this.prop];return t&&t.get?t.get(this):ae.propHooks._default.get(this)},run:function(t){var e,n=ae.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ae.propHooks._default.set(this),this}},ae.prototype.init.prototype=ae.prototype,ae.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[Jt(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}},ae.propHooks.scrollTop=ae.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ae.prototype.init,T.fx.step={};var ue,se,ce=/^(?:toggle|show|hide)$/,le=/queueHooks$/;function fe(){se&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(fe):n.setTimeout(fe,T.fx.interval),T.fx.tick())}function he(){return n.setTimeout((function(){ue=void 0})),ue=Date.now()}function pe(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function de(t,e,n){for(var r,i=(ge.tweeners[e]||[]).concat(ge.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ge(t,e,n){var r,i,o=0,a=ge.prefilters.length,u=T.Deferred().always((function(){delete s.elem})),s=function(){if(i)return!1;for(var e=ue||he(),n=Math.max(0,c.startTime+c.duration-e),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return u.notifyWith(t,[c,r,n]),r<1&&a?n:(a||u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c]),!1)},c=u.promise({elem:t,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:e,originalOptions:n,startTime:ue||he(),duration:n.duration,tweens:[],createTween:function(e,n){var r=T.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c,e])):u.rejectWith(t,[c,e]),this}}),l=c.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=Z(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(l,c.opts.specialEasing);o<a;o++)if(r=ge.prefilters[o].call(c,t,l,c.opts))return _(r.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return T.map(l,de,c),_(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(s,{elem:t,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(ge,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ft(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){_(t)?(e=t,t=["*"]):t=t.match(H);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ge.tweeners[n]=ge.tweeners[n]||[],ge.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,u,s,c,l,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&ct(t),v=J.get(t,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,T.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],ce.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||T.style(t,r)}if((s=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(c=v&&v.display)&&(c=J.get(t,"display")),"none"===(l=T.css(t,"display"))&&(c?l=c:(dt([t],!0),c=t.style.display||c,l=T.css(t,"display"),dt([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===T.css(t,"float")&&(s||(h.done((function(){d.display=c})),null==c&&(l=d.display,c="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),s=!1,p)s||(v?"hidden"in v&&(g=v.hidden):v=J.access(t,"fxshow",{display:c}),o&&(v.hidden=!g),g&&dt([t],!0),h.done((function(){for(r in g||dt([t]),J.remove(t,"fxshow"),p)T.style(t,r,p[r])}))),s=de(g?v[r]:0,r,h),r in v||(v[r]=s.start,g&&(s.end=s.start,s.start=0))}],prefilter:function(t,e){e?ge.prefilters.unshift(t):ge.prefilters.push(t)}}),T.speed=function(t,e,n){var r=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||_(t)&&t,duration:t,easing:n&&e||e&&!_(e)&&e};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){_(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(t,e,n,r){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=T.isEmptyObject(t),o=T.speed(e,n,r),a=function(){var e=ge(this,T.extend({},t),o);(i||J.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=T.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&le.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||T.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=J.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(t,e){var n=T.fn[e];T.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(pe(e,!0),t,r,i)}})),T.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){T.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(ue=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),ue=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){se||(se=!0,fe())},T.fx.stop=function(){se=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(t,e){return t=T.fx&&T.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}}))},function(){var t=a.createElement("input"),e=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",y.checkOn=""!==t.value,y.optSelected=e.selected,(t=a.createElement("input")).value="t",t.type="radio",y.radioValue="t"===t.value}();var ve,ye=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return W(this,T.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){T.removeAttr(this,t)}))}}),T.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?T.prop(t,e,n):(1===o&&T.isXMLDoc(t)||(i=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?ve:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=T.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&E(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(H);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),ve={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ye[e]||T.find.attr;ye[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=ye[a],ye[a]=i,i=null!=n(t,e,r)?a:null,ye[a]=o),i}}));var _e=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;function xe(t){return(t.match(H)||[]).join(" ")}function we(t){return t.getAttribute&&t.getAttribute("class")||""}function be(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}T.fn.extend({prop:function(t,e){return W(this,T.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[T.propFix[t]||t]}))}}),T.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(t)||(e=T.propFix[e]||e,i=T.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):_e.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(t){var e,n,r,i,o,a,u,s=0;if(_(t))return this.each((function(e){T(this).addClass(t.call(this,e,we(this)))}));if((e=be(t)).length)for(;n=this[s++];)if(i=we(n),r=1===n.nodeType&&" "+xe(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(u=xe(r))&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,a,u,s=0;if(_(t))return this.each((function(e){T(this).removeClass(t.call(this,e,we(this)))}));if(!arguments.length)return this.attr("class","");if((e=be(t)).length)for(;n=this[s++];)if(i=we(n),r=1===n.nodeType&&" "+xe(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(u=xe(r))&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):_(t)?this.each((function(n){T(this).toggleClass(t.call(this,n,we(this),e),e)})):this.each((function(){var e,i,o,a;if(r)for(i=0,o=T(this),a=be(t);e=a[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=we(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+xe(we(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;T.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=_(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,T(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(t){return null==t?"":t+""}))),(e=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Te,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:xe(T.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,u=a?null:[],s=a?o+1:i.length;for(r=o<0?s:a?o:0;r<s;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(e=T(n).val(),a)return e;u.push(e)}return u},set:function(t,e){for(var n,r,i=t.options,o=T.makeArray(e),a=i.length;a--;)((r=i[a]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=T.inArray(T(t).val(),e)>-1}},y.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),y.focusin="onfocusin"in n;var Me=/^(?:focusinfocus|focusoutblur)$/,Ce=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,r,i){var o,u,s,c,l,f,h,p,g=[r||a],v=d.call(t,"type")?t.type:t,y=d.call(t,"namespace")?t.namespace.split("."):[];if(u=p=s=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!Me.test(v+T.event.triggered)&&(v.indexOf(".")>-1&&(y=v.split("."),v=y.shift(),y.sort()),l=v.indexOf(":")<0&&"on"+v,(t=t[T.expando]?t:new T.Event(v,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=y.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:T.makeArray(e,[t]),h=T.event.special[v]||{},i||!h.trigger||!1!==h.trigger.apply(r,e))){if(!i&&!h.noBubble&&!m(r)){for(c=h.delegateType||v,Me.test(c+v)||(u=u.parentNode);u;u=u.parentNode)g.push(u),s=u;s===(r.ownerDocument||a)&&g.push(s.defaultView||s.parentWindow||n)}for(o=0;(u=g[o++])&&!t.isPropagationStopped();)p=u,t.type=o>1?c:h.bindType||v,(f=(J.get(u,"events")||{})[t.type]&&J.get(u,"handle"))&&f.apply(u,e),(f=l&&u[l])&&f.apply&&Q(u)&&(t.result=f.apply(u,e),!1===t.result&&t.preventDefault());return t.type=v,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(g.pop(),e)||!Q(r)||l&&_(r[v])&&!m(r)&&((s=r[l])&&(r[l]=null),T.event.triggered=v,t.isPropagationStopped()&&p.addEventListener(v,Ce),r[v](),t.isPropagationStopped()&&p.removeEventListener(v,Ce),T.event.triggered=void 0,s&&(r[l]=s)),t.result}},simulate:function(t,e,n){var r=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(r,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each((function(){T.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),y.focusin||T.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){T.event.simulate(e,t.target,T.event.fix(t))};T.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,e);i||r.addEventListener(t,n,!0),J.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,e)-1;i?J.access(r,e,i):(r.removeEventListener(t,n,!0),J.remove(r,e))}}}));var Ne=n.location,ke=Date.now(),Se=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var Ae=/\[\]$/,Ee=/\r?\n/g,De=/^(?:submit|button|image|reset|file)$/i,je=/^(?:input|select|textarea|keygen)/i;function Le(t,e,n,r){var i;if(Array.isArray(e))T.each(e,(function(e,i){n||Ae.test(t)?r(t,i):Le(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Le(t+"["+i+"]",e[i],n,r)}T.param=function(t,e){var n,r=[],i=function(t,e){var n=_(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,(function(){i(this.name,this.value)}));else for(n in t)Le(n,t[n],e,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&je.test(this.nodeName)&&!De.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}})):{name:e.name,value:n.replace(Ee,"\r\n")}})).get()}});var qe=/%20/g,Pe=/#.*$/,Oe=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,Ue=/^\/\//,Fe={},Ie={},ze="*/".concat("*"),$e=a.createElement("a");function Be(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(H)||[];if(_(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function We(t,e,n,r){var i={},o=t===Ie;function a(u){var s;return i[u]=!0,T.each(t[u]||[],(function(t,u){var c=u(e,n,r);return"string"!=typeof c||o||i[c]?o?!(s=c):void 0:(e.dataTypes.unshift(c),a(c),!1)})),s}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ye(t,e){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&T.extend(!0,t,r),t}$e.href=Ne.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ne.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ne.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ye(Ye(t,T.ajaxSettings),e):Ye(T.ajaxSettings,t)},ajaxPrefilter:Be(Fe),ajaxTransport:Be(Ie),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,u,s,c,l,f,h,p,d=T.ajaxSetup({},e),g=d.context||d,v=d.context&&(g.nodeType||g.jquery)?T(g):T.event,y=T.Deferred(),_=T.Callbacks("once memory"),m=d.statusCode||{},x={},w={},b="canceled",M={readyState:0,getResponseHeader:function(t){var e;if(l){if(!u)for(u={};e=Re.exec(o);)u[e[1].toLowerCase()+" "]=(u[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=u[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==l&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)M.always(t[M.status]);else for(e in t)m[e]=[m[e],t[e]];return this},abort:function(t){var e=t||b;return r&&r.abort(e),C(0,e),this}};if(y.promise(M),d.url=((t||d.url||Ne.href)+"").replace(Ue,Ne.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){c=a.createElement("a");try{c.href=d.url,c.href=c.href,d.crossDomain=$e.protocol+"//"+$e.host!=c.protocol+"//"+c.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),We(Fe,d,e,M),l)return M;for(h in(f=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!He.test(d.type),i=d.url.replace(Pe,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(qe,"+")):(p=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Se.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Oe,"$1"),p=(Se.test(i)?"&":"?")+"_="+ke+++p),d.url=i+p),d.ifModified&&(T.lastModified[i]&&M.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&M.setRequestHeader("If-None-Match",T.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&M.setRequestHeader("Content-Type",d.contentType),M.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+ze+"; q=0.01":""):d.accepts["*"]),d.headers)M.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(g,M,d)||l))return M.abort();if(b="abort",_.add(d.complete),M.done(d.success),M.fail(d.error),r=We(Ie,d,e,M)){if(M.readyState=1,f&&v.trigger("ajaxSend",[M,d]),l)return M;d.async&&d.timeout>0&&(s=n.setTimeout((function(){M.abort("timeout")}),d.timeout));try{l=!1,r.send(x,C)}catch(t){if(l)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,a,u){var c,h,p,x,w,b=e;l||(l=!0,s&&n.clearTimeout(s),r=void 0,o=u||"",M.readyState=t>0?4:0,c=t>=200&&t<300||304===t,a&&(x=function(t,e,n){for(var r,i,o,a,u=t.contents,s=t.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in u)if(u[i]&&u[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||t.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}(d,M,a)),x=function(t,e,n,r){var i,o,a,u,s,c={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!s&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),s=o,o=l.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(!(a=c[s+" "+o]||c["* "+o]))for(i in c)if((u=i.split(" "))[1]===o&&(a=c[s+" "+u[0]]||c["* "+u[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=u[0],l.unshift(u[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+s+" to "+o}}}return{state:"success",data:e}}(d,x,M,c),c?(d.ifModified&&((w=M.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=w),(w=M.getResponseHeader("etag"))&&(T.etag[i]=w)),204===t||"HEAD"===d.type?b="nocontent":304===t?b="notmodified":(b=x.state,h=x.data,c=!(p=x.error))):(p=b,!t&&b||(b="error",t<0&&(t=0))),M.status=t,M.statusText=(e||b)+"",c?y.resolveWith(g,[h,b,M]):y.rejectWith(g,[M,b,p]),M.statusCode(m),m=void 0,f&&v.trigger(c?"ajaxSuccess":"ajaxError",[M,d,c?h:p]),_.fireWith(g,[M,b]),f&&(v.trigger("ajaxComplete",[M,d]),--T.active||T.event.trigger("ajaxStop")))}return M},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],(function(t,e){T[e]=function(t,n,r,i){return _(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:t,type:e,dataType:i,data:n,success:r},T.isPlainObject(t)&&t))}})),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(_(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return _(t)?this.each((function(e){T(this).wrapInner(t.call(this,e))})):this.each((function(){var e=T(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=_(t);return this.each((function(n){T(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Xe={0:200,1223:204},Ve=T.ajaxSettings.xhr();y.cors=!!Ve&&"withCredentials"in Ve,y.ajax=Ve=!!Ve,T.ajaxTransport((function(t){var e,r;if(y.cors||Ve&&!t.crossDomain)return{send:function(i,o){var a,u=t.xhr();if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)u[a]=t.xhrFields[a];for(a in t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)u.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=u.onload=u.onerror=u.onabort=u.ontimeout=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o(Xe[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=e(),r=u.onerror=u.ontimeout=e("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout((function(){e&&r()}))},e=e("abort");try{u.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),T.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),T.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=T("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ze,Qe=[],Ge=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Qe.pop()||T.expando+"_"+ke++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",(function(t,e,r){var i,o,a,u=!1!==t.jsonp&&(Ge.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ge.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=_(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Ge,"$1"+i):!1!==t.jsonp&&(t.url+=(Se.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||T.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?T(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Qe.push(i)),a&&_(o)&&o(a[0]),a=o=void 0})),"script"})),y.createHTMLDocument=((Ze=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ze.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(y.createHTMLDocument?((r=(e=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,e.head.appendChild(r)):e=a),o=!n&&[],(i=D.exec(t))?[e.createElement(i[1])]:(i=Mt([t],e,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(t,e,n){var r,i,o,a=this,u=t.indexOf(" ");return u>-1&&(r=xe(t.slice(u)),t=t.slice(0,u)),_(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&T.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?T("<div>").append(T.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){T.fn[e]=function(t){return this.on(e,t)}})),T.expr.pseudos.animated=function(t){return T.grep(T.timers,(function(e){return t===e.elem})).length},T.offset={setOffset:function(t,e,n){var r,i,o,a,u,s,c=T.css(t,"position"),l=T(t),f={};"static"===c&&(t.style.position="relative"),u=l.offset(),o=T.css(t,"top"),s=T.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+s).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),_(e)&&(e=e.call(t,n,T.extend({},u))),null!=e.top&&(f.top=e.top-u.top+a),null!=e.left&&(f.left=e.left-u.left+i),"using"in e?e.using.call(t,f):l.css(f)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){T.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),i.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-T.css(r,"marginTop",!0),left:e.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||at}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;T.fn[t]=function(r){return W(this,(function(t,r,i){var o;if(m(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),T.each(["top","left"],(function(t,e){T.cssHooks[e]=Vt(y.pixelPosition,(function(t,n){if(n)return n=Xt(t,e),Bt.test(n)?T(t).position()[e]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(t,e){T.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){T.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),u=n||(!0===i||!0===o?"margin":"border");return W(this,(function(e,n,i){var o;return m(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?T.css(e,n,u):T.style(e,n,i,u)}),e,a?i:void 0,a)}}))})),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){T.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),T.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),_(t))return r=s.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(s.call(arguments)))}).guid=t.guid=t.guid||T.guid++,i},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=E,T.isFunction=_,T.isWindow=m,T.camelCase=Z,T.type=b,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return T}.apply(e,[]))||(t.exports=r);var Je=n.jQuery,Ke=n.$;return T.noConflict=function(t){return n.$===T&&(n.$=Ke),t&&n.jQuery===T&&(n.jQuery=Je),T},i||(n.jQuery=n.$=T),T}))},53:function(t,e,n){"use strict";n.r(e);var r=n(49),i=n(2);r(document).ready((function(){const t=i.w("#svg-port"),e=parseInt(t.style("width").replace("px","")),n=parseInt(t.style("height").replace("px",""));r.post("wordcloudData",{width:e,height:n},(function(t){console.log(t),function(t){console.log(t);const e=i.w("#svg-port"),n=parseInt(e.style("width").replace("px","")),r=parseInt(e.style("height").replace("px","")),o=i.s(i.v).domain([0,10]);e.append("g").attr("id","polish").attr("transform","translate( "+[n/4,r/2]+")").selectAll("text").data(t.polish).enter().append("text").text((function(t){return t.text})).attr("text-anchor","middle").attr("transform",(function(t){return"translate("+[t.x,t.y]+")rotate("+t.rotate+")"})).attr("fill",(t,e)=>o(e%10)).attr("font-family","sans-serif").attr("text-anchor","middle").attr("font-size",t=>t.size),e.append("g").attr("id","english").attr("transform","translate( "+[n/1.3,r/2]+")").selectAll("text").data(t.english).enter().append("text").text(t=>t.text).attr("text-anchor","middle").attr("transform",t=>"translate("+[t.x,t.y]+")rotate("+t.rotate+")").attr("fill",(t,e)=>o(e%10)).attr("font-family","sans-serif").attr("text-anchor","middle").attr("font-size",t=>t.size)}(t)}))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,