!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=58)}({0:function(t,n,e){"use strict";var r="http://www.w3.org/1999/xhtml",i={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},o=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),i.hasOwnProperty(n)?{space:i[n],local:t}:t};function u(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===r&&n.documentElement.namespaceURI===r?n.createElement(t):n.createElementNS(e,t)}}function a(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var s=function(t){var n=o(t);return(n.local?a:u)(n)};function c(){}var h=function(t){return null==t?c:function(){return this.querySelector(t)}};function l(){return[]}var f=function(t){return null==t?l:function(){return this.querySelectorAll(t)}},p=function(t){return function(){return this.matches(t)}},_=function(t){return new Array(t.length)};function d(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}d.prototype={constructor:d,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var y="$";function v(t,n,e,r,i,o){for(var u,a=0,s=n.length,c=o.length;a<c;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new d(t,o[a]);for(;a<s;++a)(u=n[a])&&(i[a]=u)}function g(t,n,e,r,i,o,u){var a,s,c,h={},l=n.length,f=o.length,p=new Array(l);for(a=0;a<l;++a)(s=n[a])&&(p[a]=c=y+u.call(s,s.__data__,a,n),c in h?i[a]=s:h[c]=s);for(a=0;a<f;++a)(s=h[c=y+u.call(t,o[a],a,o)])?(r[a]=s,s.__data__=o[a],h[c]=null):e[a]=new d(t,o[a]);for(a=0;a<l;++a)(s=n[a])&&h[p[a]]===s&&(i[a]=s)}function x(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function m(t){return function(){this.removeAttribute(t)}}function w(t){return function(){this.removeAttributeNS(t.space,t.local)}}function b(t,n){return function(){this.setAttribute(t,n)}}function M(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function N(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function T(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var k=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function A(t){return function(){this.style.removeProperty(t)}}function C(t,n,e){return function(){this.style.setProperty(t,n,e)}}function S(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function E(t,n){return t.style.getPropertyValue(n)||k(t).getComputedStyle(t,null).getPropertyValue(n)}function U(t){return function(){delete this[t]}}function D(t,n){return function(){this[t]=n}}function j(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function P(t){return t.trim().split(/^|\s+/)}function L(t){return t.classList||new O(t)}function O(t){this._node=t,this._names=P(t.getAttribute("class")||"")}function R(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function z(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function q(t){return function(){R(this,t)}}function F(t){return function(){z(this,t)}}function Y(t,n){return function(){(n.apply(this,arguments)?R:z)(this,t)}}O.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function H(){this.textContent=""}function I(t){return function(){this.textContent=t}}function $(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function X(){this.innerHTML=""}function B(t){return function(){this.innerHTML=t}}function J(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function V(){this.nextSibling&&this.parentNode.appendChild(this)}function Z(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function W(){return null}function Q(){var t=this.parentNode;t&&t.removeChild(this)}function G(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function K(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var tt={},nt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function et(t,n,e){return t=rt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function rt(t,n,e){return function(r){var i=nt;nt=r;try{t.call(this,this.__data__,n,e)}finally{nt=i}}}function it(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function ot(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function ut(t,n,e){var r=tt.hasOwnProperty(t.type)?et:rt;return function(i,o,u){var a,s=this.__on,c=r(n,o,u);if(s)for(var h=0,l=s.length;h<l;++h)if((a=s[h]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(a):this.__on=[a]}}function at(t,n,e,r){var i=nt;t.sourceEvent=nt,nt=t;try{return n.apply(e,r)}finally{nt=i}}function st(t,n,e){var r=k(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function ct(t,n){return function(){return st(this,t,n)}}function ht(t,n){return function(){return st(this,t,n.apply(this,arguments))}}var lt=[null];function ft(t,n){this._groups=t,this._parents=n}function pt(){return new ft([[document.documentElement]],lt)}ft.prototype=pt.prototype={constructor:ft,select:function(t){"function"!=typeof t&&(t=h(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],s=a.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),c[l]=u);return new ft(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],s=a.length,c=0;c<s;++c)(u=a[c])&&(r.push(t.call(u,u.__data__,c,a)),i.push(u));return new ft(r,i)},filter:function(t){"function"!=typeof t&&(t=p(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],c=0;c<a;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&s.push(o);return new ft(r,this._parents)},data:function(t,n){if(!t)return _=new Array(this.size()),h=-1,this.each((function(t){_[++h]=t})),_;var e,r=n?g:v,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),s=new Array(u),c=new Array(u),h=0;h<u;++h){var l=i[h],f=o[h],p=f.length,_=t.call(l,l&&l.__data__,h,i),d=_.length,y=s[h]=new Array(d),x=a[h]=new Array(d);r(l,f,y,x,c[h]=new Array(p),_,n);for(var m,w,b=0,M=0;b<d;++b)if(m=y[b]){for(b>=M&&(M=b+1);!(w=x[M])&&++M<d;);m._next=w||null}}return(a=new ft(a,i))._enter=s,a._exit=c,a},enter:function(){return new ft(this._enter||this._groups.map(_),this._parents)},exit:function(){return new ft(this._exit||this._groups.map(_),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,c=n[a],h=e[a],l=c.length,f=u[a]=new Array(l),p=0;p<l;++p)(s=c[p]||h[p])&&(f[p]=s);for(;a<r;++a)u[a]=n[a];return new ft(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=x);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],s=a.length,c=i[o]=new Array(s),h=0;h<s;++h)(u=a[h])&&(c[h]=u);c.sort(n)}return new ft(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=o(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?w:m:"function"==typeof n?e.local?T:N:e.local?M:b)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?A:"function"==typeof n?S:C)(t,n,null==e?"":e)):E(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?U:"function"==typeof n?j:D)(t,n)):this.node()[t]},classed:function(t,n){var e=P(t+"");if(arguments.length<2){for(var r=L(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Y:n?q:F)(e,n))},text:function(t){return arguments.length?this.each(null==t?H:("function"==typeof t?$:I)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?X:("function"==typeof t?J:B)(t)):this.node().innerHTML},raise:function(){return this.each(V)},lower:function(){return this.each(Z)},append:function(t){var n="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:s(t),r=null==n?W:"function"==typeof n?n:h(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Q)},clone:function(t){return this.select(t?K:G)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=it(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?ut:ot,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var s,c=0,h=a.length;c<h;++c)for(r=0,s=a[c];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?ht:ct)(t,n))}};var _t=pt,dt=function(t){return"string"==typeof t?new ft([[document.querySelector(t)]],[document.documentElement]):new ft([[t]],lt)},yt=0;function vt(){this._="@"+(++yt).toString(36)}vt.prototype=function(){return new vt}.prototype={constructor:vt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var gt=function(){for(var t,n=nt;t=n.sourceEvent;)n=t;return n},xt=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},mt=function(t){var n=gt();return n.changedTouches&&(n=n.changedTouches[0]),xt(t,n)},wt=function(t,n,e){arguments.length<3&&(e=n,n=gt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return xt(t,r);return null};e.d(n,"c",(function(){return p})),e.d(n,"d",(function(){return mt})),e.d(n,"e",(function(){return o})),e.d(n,"f",(function(){return dt})),e.d(n,"g",(function(){return _t})),e.d(n,"h",(function(){return h})),e.d(n,"i",(function(){return f})),e.d(n,"j",(function(){return E})),e.d(n,"k",(function(){return wt})),e.d(n,"b",(function(){return nt})),e.d(n,"a",(function(){return at}))},1:function(t,n,e){"use strict";function r(){}function i(t,n){var e=new r;if(t instanceof r)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var i,o=-1,u=t.length;if(null==n)for(;++o<u;)e.set(o,t[o]);else for(;++o<u;)e.set(n(i=t[o],o,t),i)}else if(t)for(var a in t)e.set(a,t[a]);return e}r.prototype=i.prototype={constructor:r,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var o=i;function u(){}var a=o.prototype;function s(t,n){var e=new u;if(t instanceof u)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}u.prototype=s.prototype={constructor:u,has:a.has,add:function(t){return this["$"+(t+="")]=t,this},remove:a.remove,clear:a.clear,values:a.keys,size:a.size,empty:a.empty,each:a.each};e.d(n,"a",(function(){return o}))},2:function(t,n,e){"use strict";var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=(o.left,u);var s=Array.prototype,c=(s.slice,s.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}),h=Math.sqrt(50),l=Math.sqrt(10),f=Math.sqrt(2),p=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=_(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function _(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=h?10:o>=l?5:o>=f?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=h?10:o>=l?5:o>=f?2:1)}function d(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=h?i*=10:o>=l?i*=5:o>=f&&(i*=2),n<t?-i:i}var y=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},v=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},g=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r};var x=Array.prototype.slice,m=function(t){return t},w=1,b=2,M=3,N=4,T=1e-6;function k(t){return"translate("+(t+.5)+",0)"}function A(t){return"translate(0,"+(t+.5)+")"}function C(t){return function(n){return+t(n)}}function S(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function E(){return!this.__axis}function U(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,s=t===w||t===N?-1:1,c=t===N||t===b?"x":"y",h=t===w||t===M?k:A;function l(l){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):m:i,_=Math.max(o,0)+a,d=n.range(),y=+d[0]+.5,v=+d[d.length-1]+.5,g=(n.bandwidth?S:C)(n.copy()),x=l.selection?l.selection():l,k=x.selectAll(".domain").data([null]),A=x.selectAll(".tick").data(f,n).order(),U=A.exit(),D=A.enter().append("g").attr("class","tick"),j=A.select("line"),P=A.select("text");k=k.merge(k.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),A=A.merge(D),j=j.merge(D.append("line").attr("stroke","currentColor").attr(c+"2",s*o)),P=P.merge(D.append("text").attr("fill","currentColor").attr(c,s*_).attr("dy",t===w?"0em":t===M?"0.71em":"0.32em")),l!==x&&(k=k.transition(l),A=A.transition(l),j=j.transition(l),P=P.transition(l),U=U.transition(l).attr("opacity",T).attr("transform",(function(t){return isFinite(t=g(t))?h(t):this.getAttribute("transform")})),D.attr("opacity",T).attr("transform",(function(t){var n=this.parentNode.__axis;return h(n&&isFinite(n=n(t))?n:g(t))}))),U.remove(),k.attr("d",t===N||t==b?u?"M"+s*u+","+y+"H0.5V"+v+"H"+s*u:"M0.5,"+y+"V"+v:u?"M"+y+","+s*u+"V0.5H"+v+"V"+s*u:"M"+y+",0.5H"+v),A.attr("opacity",1).attr("transform",(function(t){return h(g(t))})),j.attr(c+"2",s*o),P.attr(c,s*_).text(p),x.filter(E).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===b?"start":t===N?"end":"middle"),x.each((function(){this.__axis=g}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=x.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:x.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:x.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function D(t){return U(w,t)}function j(t){return U(M,t)}function P(t){return U(N,t)}var L={value:function(){}};function O(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new R(r)}function R(t){this._=t}function z(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function q(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function F(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=L,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}R.prototype=O.prototype={constructor:R,on:function(t,n){var e,r=this._,i=z(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=F(r[e],t.name,n);else if(null==n)for(e in r)r[e]=F(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=q(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new R(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Y=O,H=e(0);function I(){H.b.stopImmediatePropagation()}var $=function(){H.b.preventDefault(),H.b.stopImmediatePropagation()},X=function(t){var n=t.document.documentElement,e=Object(H.f)(t).on("dragstart.drag",$,!0);"onselectstart"in n?e.on("selectstart.drag",$,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function B(t,n){var e=t.document.documentElement,r=Object(H.f)(t).on("dragstart.drag",null);n&&(r.on("click.drag",$,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var J=function(t){return function(){return t}};function V(t,n,e,r,i,o,u,a,s,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=s,this._=c}function Z(){return!H.b.ctrlKey&&!H.b.button}function W(){return this.parentNode}function Q(t){return null==t?{x:H.b.x,y:H.b.y}:t}function G(){return navigator.maxTouchPoints||"ontouchstart"in this}V.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var K=function(){var t,n,e,r,i=Z,o=W,u=Q,a=G,s={},c=Y("start","drag","end"),h=0,l=0;function f(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",y).on("touchmove.drag",v).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var u=x("mouse",o.apply(this,arguments),H.d,this,arguments);u&&(Object(H.f)(H.b.view).on("mousemove.drag",_,!0).on("mouseup.drag",d,!0),X(H.b.view),I(),e=!1,t=H.b.clientX,n=H.b.clientY,u("start"))}}function _(){if($(),!e){var r=H.b.clientX-t,i=H.b.clientY-n;e=r*r+i*i>l}s.mouse("drag")}function d(){Object(H.f)(H.b.view).on("mousemove.drag mouseup.drag",null),B(H.b.view,e),$(),s.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=H.b.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=x(e[t].identifier,r,H.k,this,arguments))&&(I(),n("start"))}}function v(){var t,n,e=H.b.changedTouches,r=e.length;for(t=0;t<r;++t)(n=s[e[t].identifier])&&($(),n("drag"))}function g(){var t,n,e=H.b.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=s[e[t].identifier])&&(I(),n("end"))}function x(t,n,e,r,i){var o,a,l,p=e(n,t),_=c.copy();if(Object(H.a)(new V(f,"beforestart",o,t,h,p[0],p[1],0,0,_),(function(){return null!=(H.b.subject=o=u.apply(r,i))&&(a=o.x-p[0]||0,l=o.y-p[1]||0,!0)})))return function u(c){var d,y=p;switch(c){case"start":s[t]=u,d=h++;break;case"end":delete s[t],--h;case"drag":p=e(n,t),d=h}Object(H.a)(new V(f,c,o,t,d,p[0]+a,p[1]+l,p[0]-y[0],p[1]-y[1],_),_.apply,_,[c,r,i])}}return f.filter=function(t){return arguments.length?(i="function"==typeof t?t:J(!!t),f):i},f.container=function(t){return arguments.length?(o="function"==typeof t?t:J(t),f):o},f.subject=function(t){return arguments.length?(u="function"==typeof t?t:J(t),f):u},f.touchable=function(t){return arguments.length?(a="function"==typeof t?t:J(!!t),f):a},f.on=function(){var t=c.on.apply(c,arguments);return t===c?f:t},f.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,f):Math.sqrt(l)},f},tt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function nt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function et(){}var rt="\\s*([+-]?\\d+)\\s*",it="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ot="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ut=/^#([0-9a-f]{3,8})$/,at=new RegExp("^rgb\\("+[rt,rt,rt]+"\\)$"),st=new RegExp("^rgb\\("+[ot,ot,ot]+"\\)$"),ct=new RegExp("^rgba\\("+[rt,rt,rt,it]+"\\)$"),ht=new RegExp("^rgba\\("+[ot,ot,ot,it]+"\\)$"),lt=new RegExp("^hsl\\("+[it,ot,ot]+"\\)$"),ft=new RegExp("^hsla\\("+[it,ot,ot,it]+"\\)$"),pt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _t(){return this.rgb().formatHex()}function dt(){return this.rgb().formatRgb()}function yt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=ut.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?vt(n):3===e?new wt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new wt(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new wt(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=at.exec(t))?new wt(n[1],n[2],n[3],1):(n=st.exec(t))?new wt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=ct.exec(t))?gt(n[1],n[2],n[3],n[4]):(n=ht.exec(t))?gt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=lt.exec(t))?Tt(n[1],n[2]/100,n[3]/100,1):(n=ft.exec(t))?Tt(n[1],n[2]/100,n[3]/100,n[4]):pt.hasOwnProperty(t)?vt(pt[t]):"transparent"===t?new wt(NaN,NaN,NaN,0):null}function vt(t){return new wt(t>>16&255,t>>8&255,255&t,1)}function gt(t,n,e,r){return r<=0&&(t=n=e=NaN),new wt(t,n,e,r)}function xt(t){return t instanceof et||(t=yt(t)),t?new wt((t=t.rgb()).r,t.g,t.b,t.opacity):new wt}function mt(t,n,e,r){return 1===arguments.length?xt(t):new wt(t,n,e,null==r?1:r)}function wt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function bt(){return"#"+Nt(this.r)+Nt(this.g)+Nt(this.b)}function Mt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Nt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Tt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Ct(t,n,e,r)}function kt(t){if(t instanceof Ct)return new Ct(t.h,t.s,t.l,t.opacity);if(t instanceof et||(t=yt(t)),!t)return new Ct;if(t instanceof Ct)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new Ct(u,a,s,t.opacity)}function At(t,n,e,r){return 1===arguments.length?kt(t):new Ct(t,n,e,null==r?1:r)}function Ct(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function St(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Et(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}tt(et,yt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_t,formatHex:_t,formatHsl:function(){return kt(this).formatHsl()},formatRgb:dt,toString:dt}),tt(wt,mt,nt(et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new wt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new wt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:bt,formatHex:bt,formatRgb:Mt,toString:Mt})),tt(Ct,At,nt(et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ct(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ct(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new wt(St(t>=240?t-240:t+120,i,r),St(t,i,r),St(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Ut=function(t){return function(){return t}};function Dt(t,n){return function(e){return t+e*n}}function jt(t,n){var e=n-t;return e?Dt(t,e>180||e<-180?e-360*Math.round(e/360):e):Ut(isNaN(t)?n:t)}function Pt(t){return 1==(t=+t)?Lt:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Ut(isNaN(n)?e:n)}}function Lt(t,n){var e=n-t;return e?Dt(t,e):Ut(isNaN(t)?n:t)}var Ot=function t(n){var e=Pt(n);function r(t,n){var r=e((t=mt(t)).r,(n=mt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=Lt(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function Rt(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=mt(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}Rt((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Et((e-r/n)*n,u,i,o,a)}})),Rt((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Et((e-r/n)*n,i,o,u,a)}}));var zt=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Zt(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}},qt=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},Ft=function(t,n){return n-=t=+t,function(e){return t+n*e}},Yt=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Zt(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Ht=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,It=new RegExp(Ht.source,"g");var $t,Xt,Bt,Jt,Vt=function(t,n){var e,r,i,o=Ht.lastIndex=It.lastIndex=0,u=-1,a=[],s=[];for(t+="",n+="";(e=Ht.exec(t))&&(r=It.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:Ft(e,r)})),o=It.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},Zt=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Ut(n):("number"===r?Ft:"string"===r?(e=yt(n))?(n=e,Ot):Vt:n instanceof yt?Ot:n instanceof Date?qt:Array.isArray(n)?zt:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Yt:Ft)(t,n)},Wt=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},Qt=180/Math.PI,Gt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Kt=function(t,n,e,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Qt,skewX:Math.atan(s)*Qt,scaleX:u,scaleY:a}};function tn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],s=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,n,null,e);a.push({i:s-4,x:Ft(t,i)},{i:s-2,x:Ft(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ft(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ft(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,s),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Ft(t,e)},{i:a-2,x:Ft(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,s),o=u=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var nn=tn((function(t){return"none"===t?Gt:($t||($t=document.createElement("DIV"),Xt=document.documentElement,Bt=document.defaultView),$t.style.transform=t,t=Bt.getComputedStyle(Xt.appendChild($t),null).getPropertyValue("transform"),Xt.removeChild($t),t=t.slice(7,-1).split(","),Kt(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),en=tn((function(t){return null==t?Gt:(Jt||(Jt=document.createElementNS("http://www.w3.org/2000/svg","g")),Jt.setAttribute("transform",t),(t=Jt.transform.baseVal.consolidate())?(t=t.matrix,Kt(t.a,t.b,t.c,t.d,t.e,t.f)):Gt)}),", ",")",")");Math.SQRT2;function rn(t){return function(n,e){var r=t((n=At(n)).h,(e=At(e)).h),i=Lt(n.s,e.s),o=Lt(n.l,e.l),u=Lt(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}rn(jt),rn(Lt);var on=Math.PI/180,un=180/Math.PI,an=.96422,sn=1,cn=.82521,hn=4/29,ln=6/29,fn=3*ln*ln,pn=ln*ln*ln;function _n(t){if(t instanceof yn)return new yn(t.l,t.a,t.b,t.opacity);if(t instanceof Mn)return Nn(t);t instanceof wt||(t=xt(t));var n,e,r=mn(t.r),i=mn(t.g),o=mn(t.b),u=vn((.2225045*r+.7168786*i+.0606169*o)/sn);return r===i&&i===o?n=e=u:(n=vn((.4360747*r+.3850649*i+.1430804*o)/an),e=vn((.0139322*r+.0971045*i+.7141733*o)/cn)),new yn(116*u-16,500*(n-u),200*(u-e),t.opacity)}function dn(t,n,e,r){return 1===arguments.length?_n(t):new yn(t,n,e,null==r?1:r)}function yn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function vn(t){return t>pn?Math.pow(t,1/3):t/fn+hn}function gn(t){return t>ln?t*t*t:fn*(t-hn)}function xn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function mn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function wn(t){if(t instanceof Mn)return new Mn(t.h,t.c,t.l,t.opacity);if(t instanceof yn||(t=_n(t)),0===t.a&&0===t.b)return new Mn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*un;return new Mn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function bn(t,n,e,r){return 1===arguments.length?wn(t):new Mn(t,n,e,null==r?1:r)}function Mn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Nn(t){if(isNaN(t.h))return new yn(t.l,0,0,t.opacity);var n=t.h*on;return new yn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}function Tn(t){return function(n,e){var r=t((n=bn(n)).h,(e=bn(e)).h),i=Lt(n.c,e.c),o=Lt(n.l,e.l),u=Lt(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}tt(yn,dn,nt(et,{brighter:function(t){return new yn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new yn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new wt(xn(3.1338561*(n=an*gn(n))-1.6168667*(t=sn*gn(t))-.4906146*(e=cn*gn(e))),xn(-.9787684*n+1.9161415*t+.033454*e),xn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),tt(Mn,bn,nt(et,{brighter:function(t){return new Mn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Mn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Nn(this).rgb()}}));Tn(jt),Tn(Lt);var kn=-.29227,An=-.90649,Cn=1.97294,Sn=Cn*An,En=1.78277*Cn,Un=1.78277*kn- -.14861*An;function Dn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof jn)return new jn(t.h,t.s,t.l,t.opacity);t instanceof wt||(t=xt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Un*r+Sn*n-En*e)/(Un+Sn-En),o=r-i,u=(Cn*(e-i)-kn*o)/An,a=Math.sqrt(u*u+o*o)/(Cn*i*(1-i)),s=a?Math.atan2(u,o)*un-120:NaN;return new jn(s<0?s+360:s,a,i,t.opacity)}(t):new jn(t,n,e,null==r?1:r)}function jn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Pn(t){return function n(e){function r(n,r){var i=t((n=Dn(n)).h,(r=Dn(r)).h),o=Lt(n.s,r.s),u=Lt(n.l,r.l),a=Lt(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}tt(jn,Dn,nt(et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new jn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new jn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*on,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new wt(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(kn*r+An*i)),255*(n+e*(Cn*r)),this.opacity)}}));Pn(jt),Pn(Lt);var Ln,On,Rn=0,zn=0,qn=0,Fn=1e3,Yn=0,Hn=0,In=0,$n="object"==typeof performance&&performance.now?performance:Date,Xn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Bn(){return Hn||(Xn(Jn),Hn=$n.now()+In)}function Jn(){Hn=0}function Vn(){this._call=this._time=this._next=null}function Zn(t,n,e){var r=new Vn;return r.restart(t,n,e),r}function Wn(){Hn=(Yn=$n.now())+In,Rn=zn=0;try{!function(){Bn(),++Rn;for(var t,n=Ln;n;)(t=Hn-n._time)>=0&&n._call.call(null,t),n=n._next;--Rn}()}finally{Rn=0,function(){var t,n,e=Ln,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ln=n);On=t,Gn(r)}(),Hn=0}}function Qn(){var t=$n.now(),n=t-Yn;n>Fn&&(In-=n,Yn=t)}function Gn(t){Rn||(zn&&(zn=clearTimeout(zn)),t-Hn>24?(t<1/0&&(zn=setTimeout(Wn,t-$n.now()-In)),qn&&(qn=clearInterval(qn))):(qn||(Yn=$n.now(),qn=setInterval(Qn,Fn)),Rn=1,Xn(Wn)))}Vn.prototype=Zn.prototype={constructor:Vn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Bn():+e)+(null==n?0:+n),this._next||On===this||(On?On._next=this:Ln=this,On=this),this._call=t,this._time=e,Gn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Gn())}};var Kn=function(t,n,e){var r=new Vn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},te=Y("start","end","cancel","interrupt"),ne=[],ee=0,re=1,ie=2,oe=3,ue=4,ae=5,se=6,ce=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var c,h,l,f;if(e.state!==re)return a();for(c in i)if((f=i[c]).name===e.name){if(f.state===oe)return Kn(o);f.state===ue?(f.state=se,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[c]):+c<n&&(f.state=se,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[c])}if(Kn((function(){e.state===oe&&(e.state=ue,e.timer.restart(u,e.delay,e.time),u(s))})),e.state=ie,e.on.call("start",t,t.__data__,e.index,e.group),e.state===ie){for(e.state=oe,r=new Array(l=e.tween.length),c=0,h=-1;c<l;++c)(f=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++h]=f);r.length=h+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=ae,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);e.state===ae&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=se,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Zn((function(t){e.state=re,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:te,tween:ne,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:ee})};function he(t,n){var e=fe(t,n);if(e.state>ee)throw new Error("too late; already scheduled");return e}function le(t,n){var e=fe(t,n);if(e.state>oe)throw new Error("too late; already running");return e}function fe(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var pe=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>ie&&e.state<ae,e.state=se,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}};function _e(t,n){var e,r;return function(){var i=le(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function de(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=le(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=a;break}s===c&&i.push(a)}o.tween=i}}function ye(t,n,e){var r=t._id;return t.each((function(){var t=le(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return fe(t,r).value[n]}}var ve=function(t,n){var e;return("number"==typeof n?Ft:n instanceof yt?Ot:(e=yt(n))?(n=e,Ot):Vt)(t,n)};function ge(t){return function(){this.removeAttribute(t)}}function xe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function me(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function we(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function be(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttribute(t))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttribute(t)}}function Me(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttributeNS(t.space,t.local)}}function Ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}function Te(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i}function ke(t,n){return function(){he(this,t).delay=+n.apply(this,arguments)}}function Ae(t,n){return n=+n,function(){he(this,t).delay=n}}function Ce(t,n){return function(){le(this,t).duration=+n.apply(this,arguments)}}function Se(t,n){return n=+n,function(){le(this,t).duration=n}}function Ee(t,n){if("function"!=typeof n)throw new Error;return function(){le(this,t).ease=n}}function Ue(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?he:le;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var De=H.g.prototype.constructor;function je(t){return function(){this.style.removeProperty(t)}}function Pe(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}var Le=0;function Oe(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Re(){return++Le}var ze=H.g.prototype;Oe.prototype=function(t){return Object(H.g)().transition(t)}.prototype={constructor:Oe,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(H.h)(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,c=r[u],h=c.length,l=o[u]=new Array(h),f=0;f<h;++f)(a=c[f])&&(s=t.call(a,a.__data__,f,c))&&("__data__"in a&&(s.__data__=a.__data__),l[f]=s,ce(l[f],n,e,f,l,fe(a,e)));return new Oe(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(H.i)(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,c=r[a],h=c.length,l=0;l<h;++l)if(s=c[l]){for(var f,p=t.call(s,s.__data__,l,c),_=fe(s,e),d=0,y=p.length;d<y;++d)(f=p[d])&&ce(f,n,e,d,p,_);o.push(p),u.push(s)}return new Oe(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=Object(H.c)(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],c=0;c<a;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&s.push(o);return new Oe(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,c=n[a],h=e[a],l=c.length,f=u[a]=new Array(l),p=0;p<l;++p)(s=c[p]||h[p])&&(f[p]=s);for(;a<r;++a)u[a]=n[a];return new Oe(u,this._parents,this._name,this._id)},selection:function(){return new De(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Re(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,c=0;c<s;++c)if(u=a[c]){var h=fe(u,n);ce(u,t,e,c,a,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new Oe(r,this._parents,t,e)},call:ze.call,nodes:ze.nodes,node:ze.node,size:ze.size,empty:ze.empty,each:ze.each,on:function(t,n){var e=this._id;return arguments.length<2?fe(this.node(),e).on.on(t):this.each(Ue(e,t,n))},attr:function(t,n){var e=Object(H.e)(t),r="transform"===e?en:ve;return this.attrTween(t,"function"==typeof n?(e.local?Me:be)(e,r,ye(this,"attr."+t,n)):null==n?(e.local?xe:ge)(e):(e.local?we:me)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Object(H.e)(t);return this.tween(e,(r.local?Ne:Te)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?nn:ve;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Object(H.j)(this,t),u=(this.style.removeProperty(t),Object(H.j)(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,je(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Object(H.j)(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=Object(H.j)(this,t)),u===s?null:u===r&&s===i?o:(i=s,o=n(r=u,a))}}(t,r,ye(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var s=le(this,t),c=s.on,h=null==s.value[u]?o||(o=je(n)):void 0;c===e&&i===h||(r=(e=c).copy()).on(a,i=h),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Object(H.j)(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Pe(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ye(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=fe(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?_e:de)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ke:Ae)(n,t)):fe(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ce:Se)(n,t)):fe(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ee(n,t)):fe(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},s={value:function(){0==--i&&o()}};e.each((function(){var e=le(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var qe=2*Math.PI,Fe=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=qe);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*qe)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=qe);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*qe)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=qe);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*qe)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Ye(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Fe.time=Bn(),Fe;return e}H.g.prototype.interrupt=function(t){return this.each((function(){pe(this,t)}))},H.g.prototype.transition=function(t){var n,e;t instanceof Oe?(n=t._id,t=t._name):(n=Re(),(e=Fe).time=Bn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,c=0;c<s;++c)(u=a[c])&&ce(u,t,n,c,a,e||Ye(u,n));return new Oe(r,this._parents,t,n)};["e","w"].map(He),["n","s"].map(He),["n","e","s","w","nw","ne","se","sw"].map(He);function He(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ie=Math.PI,$e=2*Ie,Xe=$e-1e-6;function Be(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Je(){return new Be}Be.prototype=Je.prototype={constructor:Be,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,s=r-n,c=o-t,h=u-n,l=c*c+h*h;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(h*a-s*c)>1e-6&&i){var f=e-o,p=r-u,_=a*a+s*s,d=f*f+p*p,y=Math.sqrt(_),v=Math.sqrt(l),g=i*Math.tan((Ie-Math.acos((_+l-d)/(2*y*v)))/2),x=g/v,m=g/y;Math.abs(x-1)>1e-6&&(this._+="L"+(t+x*c)+","+(n+x*h)),this._+="A"+i+","+i+",0,0,"+ +(h*f>c*p)+","+(this._x1=t+m*a)+","+(this._y1=n+m*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+u,c=n+a,h=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(l<0&&(l=l%$e+$e),l>Xe?this._+="A"+e+","+e+",0,1,"+h+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+h+","+(this._x1=s)+","+(this._y1=c):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Ie)+","+h+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Ve=Je;var Ze=e(1);Array.prototype.slice;var We={},Qe={},Ge=34,Ke=10,tr=13;function nr(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function er(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function rr(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function ir(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+rr(-n,6):n>9999?"+"+rr(n,6):rr(n,4))+"-"+rr(t.getUTCMonth()+1,2)+"-"+rr(t.getUTCDate(),2)+(o?"T"+rr(e,2)+":"+rr(r,2)+":"+rr(i,2)+"."+rr(o,3)+"Z":i?"T"+rr(e,2)+":"+rr(r,2)+":"+rr(i,2)+"Z":r||e?"T"+rr(e,2)+":"+rr(r,2)+"Z":"")}var or=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,s=o<=0,c=!1;function h(){if(s)return Qe;if(c)return c=!1,We;var n,r,i=u;if(t.charCodeAt(i)===Ge){for(;u++<o&&t.charCodeAt(u)!==Ge||t.charCodeAt(++u)===Ge;);return(n=u)>=o?s=!0:(r=t.charCodeAt(u++))===Ke?c=!0:r===tr&&(c=!0,t.charCodeAt(u)===Ke&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===Ke)c=!0;else if(r===tr)c=!0,t.charCodeAt(u)===Ke&&++u;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===Ke&&--o,t.charCodeAt(o-1)===tr&&--o;(r=h())!==Qe;){for(var l=[];r!==We&&r!==Qe;)l.push(r),r=h();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?ir(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=nr(t);return function(r,i){return n(e(r),i,t)}}(t,n):nr(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=er(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=er(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},ur=or(","),ar=ur.parse,sr=(ur.parseRows,ur.format,ur.formatBody,ur.formatRows,or("\t")),cr=sr.parse;sr.parseRows,sr.format,sr.formatBody,sr.formatRows;function hr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var lr=function(t,n){return fetch(t,n).then(hr)};function fr(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),lr(n,e).then((function(n){return t(n,r)}))}}fr(ar),fr(cr);function pr(t){return function(n,e){return lr(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}pr("application/xml"),pr("text/html"),pr("image/svg+xml");var _r=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},dr=function(t){return function(){return t}},yr=function(){return 1e-6*(Math.random()-.5)};function vr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,s,c,h,l,f,p=t._root,_={data:r},d=t._x0,y=t._y0,v=t._x1,g=t._y1;if(!p)return t._root=_,t;for(;p.length;)if((c=n>=(o=(d+v)/2))?d=o:v=o,(h=e>=(u=(y+g)/2))?y=u:g=u,i=p,!(p=p[l=h<<1|c]))return i[l]=_,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===a&&e===s)return _.next=p,i?i[l]=_:t._root=_,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(c=n>=(o=(d+v)/2))?d=o:v=o,(h=e>=(u=(y+g)/2))?y=u:g=u}while((l=h<<1|c)==(f=(s>=u)<<1|a>=o));return i[f]=p,i[l]=_,t}var gr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function xr(t){return t[0]}function mr(t){return t[1]}function wr(t,n,e){var r=new br(null==n?xr:n,null==e?mr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function br(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Mr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Nr=wr.prototype=br.prototype;function Tr(t){return t.x+t.vx}function kr(t){return t.y+t.vy}Nr.copy=function(){var t,n,e=new br(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Mr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Mr(n));return e},Nr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return vr(this.cover(n,e),n,e,t)},Nr.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),s=1/0,c=1/0,h=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<s&&(s=r),r>h&&(h=r),i<c&&(c=i),i>l&&(l=i));if(s>h||c>l)return this;for(this.cover(s,c).cover(h,l),e=0;e<o;++e)vr(this,u[e],a[e],t[e]);return this},Nr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,s=i-e,c=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=c,c=u,s*=2,a){case 0:i=e+s,o=r+s;break;case 1:e=i-s,o=r+s;break;case 2:i=e+s,r=o-s;break;case 3:e=i-s,r=o-s}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Nr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Nr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Nr.find=function(t,n,e){var r,i,o,u,a,s,c,h=this._x0,l=this._y0,f=this._x1,p=this._y1,_=[],d=this._root;for(d&&_.push(new gr(d,h,l,f,p)),null==e?e=1/0:(h=t-e,l=n-e,f=t+e,p=n+e,e*=e);s=_.pop();)if(!(!(d=s.node)||(i=s.x0)>f||(o=s.y0)>p||(u=s.x1)<h||(a=s.y1)<l))if(d.length){var y=(i+u)/2,v=(o+a)/2;_.push(new gr(d[3],y,v,u,a),new gr(d[2],i,v,y,a),new gr(d[1],y,o,u,v),new gr(d[0],i,o,y,v)),(c=(n>=v)<<1|t>=y)&&(s=_[_.length-1],_[_.length-1]=_[_.length-1-c],_[_.length-1-c]=s)}else{var g=t-+this._x.call(null,d.data),x=n-+this._y.call(null,d.data),m=g*g+x*x;if(m<e){var w=Math.sqrt(e=m);h=t-w,l=n-w,f=t+w,p=n+w,r=d.data}}return r},Nr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,s,c,h,l,f,p=this._root,_=this._x0,d=this._y0,y=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((c=o>=(a=(_+y)/2))?_=a:y=a,(h=u>=(s=(d+v)/2))?d=s:v=s,n=p,!(p=p[l=h<<1|c]))return this;if(!p.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,f=l)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[f]=p:this._root=p),this):(this._root=i,this)},Nr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Nr.root=function(){return this._root},Nr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Nr.visit=function(t){var n,e,r,i,o,u,a=[],s=this._root;for(s&&a.push(new gr(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&s.length){var c=(r+o)/2,h=(i+u)/2;(e=s[3])&&a.push(new gr(e,c,h,o,u)),(e=s[2])&&a.push(new gr(e,r,h,c,u)),(e=s[1])&&a.push(new gr(e,c,i,o,h)),(e=s[0])&&a.push(new gr(e,r,i,c,h))}return this},Nr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new gr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,s=n.x1,c=n.y1,h=(u+s)/2,l=(a+c)/2;(o=i[0])&&e.push(new gr(o,u,a,h,l)),(o=i[1])&&e.push(new gr(o,h,a,s,l)),(o=i[2])&&e.push(new gr(o,u,l,h,c)),(o=i[3])&&e.push(new gr(o,h,l,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Nr.x=function(t){return arguments.length?(this._x=t,this):this._x},Nr.y=function(t){return arguments.length?(this._y=t,this):this._y};var Ar=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,s,c,h,l,f=n.length,p=0;p<i;++p)for(o=wr(n,Tr,kr).visitAfter(u),t=0;t<f;++t)a=n[t],h=e[a.index],l=h*h,s=a.x+a.vx,c=a.y+a.vy,o.visit(_);function _(t,n,e,i,o){var u=t.data,f=t.r,p=h+f;if(!u)return n>s+p||i<s-p||e>c+p||o<c-p;if(u.index>a.index){var _=s-u.x-u.vx,d=c-u.y-u.vy,y=_*_+d*d;y<p*p&&(0===_&&(y+=(_=yr())*_),0===d&&(y+=(d=yr())*d),y=(p-(y=Math.sqrt(y)))/y*r,a.vx+=(_*=y)*(p=(f*=f)/(l+f)),a.vy+=(d*=y)*p,u.vx-=_*(p=1-p),u.vy-=d*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=dr(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:dr(+n),a(),o):t},o};function Cr(t){return t.index}function Sr(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Er=function(t){var n,e,r,i,o,u=Cr,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},s=dr(30),c=1;function h(r){for(var i=0,u=t.length;i<c;++i)for(var a,s,h,l,f,p,_,d=0;d<u;++d)s=(a=t[d]).source,l=(h=a.target).x+h.vx-s.x-s.vx||yr(),f=h.y+h.vy-s.y-s.vy||yr(),l*=p=((p=Math.sqrt(l*l+f*f))-e[d])/p*r*n[d],f*=p,h.vx-=l*(_=o[d]),h.vy-=f*_,s.vx+=l*(_=1-_),s.vy+=f*_}function l(){if(r){var a,s,c=r.length,h=t.length,l=Object(Ze.a)(r,u);for(a=0,i=new Array(c);a<h;++a)(s=t[a]).index=a,"object"!=typeof s.source&&(s.source=Sr(l,s.source)),"object"!=typeof s.target&&(s.target=Sr(l,s.target)),i[s.source.index]=(i[s.source.index]||0)+1,i[s.target.index]=(i[s.target.index]||0)+1;for(a=0,o=new Array(h);a<h;++a)s=t[a],o[a]=i[s.source.index]/(i[s.source.index]+i[s.target.index]);n=new Array(h),f(),e=new Array(h),p()}}function f(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+s(t[n],n,t)}return null==t&&(t=[]),h.initialize=function(t){r=t,l()},h.links=function(n){return arguments.length?(t=n,l(),h):t},h.id=function(t){return arguments.length?(u=t,h):u},h.iterations=function(t){return arguments.length?(c=+t,h):c},h.strength=function(t){return arguments.length?(a="function"==typeof t?t:dr(+t),f(),h):a},h.distance=function(t){return arguments.length?(s="function"==typeof t?t:dr(+t),p(),h):s},h};function Ur(t){return t.x}function Dr(t){return t.y}var jr=10,Pr=Math.PI*(3-Math.sqrt(5)),Lr=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=Object(Ze.a)(),s=Zn(h),c=Y("tick","end");function h(){l(),c.call("tick",n),e<r&&(s.stop(),c.call("end",n))}function l(r){var s,c,h=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each((function(t){t(e)})),s=0;s<h;++s)null==(c=t[s]).fx?c.x+=c.vx*=u:(c.x=c.fx,c.vx=0),null==c.fy?c.y+=c.vy*=u:(c.y=c.fy,c.vy=0);return n}function f(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=jr*Math.sqrt(e),o=e*Pr;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),f(),n={tick:l,restart:function(){return s.restart(h),n},stop:function(){return s.stop(),n},nodes:function(e){return arguments.length?(t=e,f(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,s,c=0,h=t.length;for(null==r?r=1/0:r*=r,c=0;c<h;++c)(u=(i=n-(a=t[c]).x)*i+(o=e-a.y)*o)<r&&(s=a,r=u);return s},on:function(t,e){return arguments.length>1?(c.on(t,e),n):c.on(t)}}},Or=function(){var t,n,e,r,i=dr(-30),o=1,u=1/0,a=.81;function s(r){var i,o=t.length,u=wr(t,Ur,Dr).visitAfter(h);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function c(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function h(t){var n,e,i,o,u,a=0,s=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,s+=e,i+=e*n.x,o+=e*n.y);t.x=i/s,t.y=o/s}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,s,c){if(!t.value)return!0;var h=t.x-n.x,l=t.y-n.y,f=c-i,p=h*h+l*l;if(f*f/a<p)return p<u&&(0===h&&(p+=(h=yr())*h),0===l&&(p+=(l=yr())*l),p<o&&(p=Math.sqrt(o*p)),n.vx+=h*t.value*e/p,n.vy+=l*t.value*e/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===h&&(p+=(h=yr())*h),0===l&&(p+=(l=yr())*l),p<o&&(p=Math.sqrt(o*p)));do{t.data!==n&&(f=r[t.data.index]*e/p,n.vx+=h*f,n.vy+=l*f)}while(t=t.next)}}return s.initialize=function(n){t=n,c()},s.strength=function(t){return arguments.length?(i="function"==typeof t?t:dr(+t),c(),s):i},s.distanceMin=function(t){return arguments.length?(o=t*t,s):Math.sqrt(o)},s.distanceMax=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s.theta=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s},Rr=function(t){var n,e,r,i=dr(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=dr(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:dr(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:dr(+n),u(),o):t},o},zr=function(t){var n,e,r,i=dr(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=dr(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:dr(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:dr(+n),u(),o):t},o},qr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Fr=function(t){return(t=qr(Math.abs(t)))?t[1]:NaN},Yr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Hr(t){if(!(n=Yr.exec(t)))throw new Error("invalid format: "+t);var n;return new Ir({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Ir(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Hr.prototype=Ir.prototype,Ir.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var $r,Xr,Br,Jr,Vr=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Zr=function(t,n){var e=qr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Wr={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Zr(100*t,n)},r:Zr,s:function(t,n){var e=qr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-($r=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+qr(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Qr=function(t){return t},Gr=Array.prototype.map,Kr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Xr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Qr:(n=Gr.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Qr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Gr.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",h=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=Hr(t)).fill,e=t.align,l=t.sign,f=t.symbol,p=t.zero,_=t.width,d=t.comma,y=t.precision,v=t.trim,g=t.type;"n"===g?(d=!0,g="g"):Wr[g]||(void 0===y&&(y=12),v=!0,g="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var x="$"===f?i:"#"===f&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===f?o:/[%p]/.test(g)?s:"",w=Wr[g],b=/[defgprs%]/.test(g);function M(t){var i,o,s,f=x,M=m;if("c"===g)M=w(t)+M,t="";else{var N=(t=+t)<0;if(t=isNaN(t)?h:w(Math.abs(t),y),v&&(t=Vr(t)),N&&0==+t&&(N=!1),f=(N?"("===l?l:c:"-"===l||"("===l?"":l)+f,M=("s"===g?Kr[8+$r/3]:"")+M+(N&&"("===l?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){M=(46===s?u+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}d&&!p&&(t=r(t,1/0));var T=f.length+t.length+M.length,k=T<_?new Array(_-T+1).join(n):"";switch(d&&p&&(t=r(k+t,k.length?_-M.length:1/0),k=""),e){case"<":t=f+t+M+k;break;case"=":t=f+k+t+M;break;case"^":t=k.slice(0,T=k.length>>1)+f+t+M+k.slice(T);break;default:t=k+f+t+M}return a(t)}return y=void 0===y?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=Hr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Fr(n)/3))),i=Math.pow(10,-r),o=Kr[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Br=Xr.format,Jr=Xr.formatPrefix;var ti=function(){return new ni};function ni(){this.reset()}ni.prototype={constructor:ni,reset:function(){this.s=this.t=0},add:function(t){ri(ei,t,this.t),ri(this,ei.s,this.s),this.s?this.t+=ei.t:this.s=ei.t},valueOf:function(){return this.s}};var ei=new ni;function ri(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var ii=1e-6,oi=1e-12,ui=Math.PI,ai=ui/2,si=ui/4,ci=2*ui,hi=ui/180,li=Math.abs,fi=Math.atan,pi=Math.atan2,_i=Math.cos,di=(Math.ceil,Math.exp),yi=(Math.floor,Math.log),vi=(Math.pow,Math.sin),gi=Math.sign||function(t){return t>0?1:t<0?-1:0},xi=Math.sqrt,mi=Math.tan;function wi(t){return t>1?0:t<-1?ui:Math.acos(t)}function bi(t){return t>1?ai:t<-1?-ai:Math.asin(t)}function Mi(){}ti(),ti();function Ni(t){var n=t[0],e=t[1],r=_i(e);return[r*_i(n),r*vi(n),vi(e)]}function Ti(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function ki(t){var n=xi(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}ti();function Ai(t,n){return[li(t)>ui?t+Math.round(-t/ci)*ci:t,n]}Ai.invert=Ai;var Ci=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Mi,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Si=function(t,n){return li(t[0]-n[0])<ii&&li(t[1]-n[1])<ii};function Ei(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Ui=function(t,n,e,r,i){var o,u,a=[],s=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Si(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Ei(r,t,null,!0)),s.push(e.o=new Ei(r,null,e,!1)),a.push(e=new Ei(u,t,null,!1)),s.push(e.o=new Ei(u,null,e,!0))}})),a.length){for(s.sort(n),Di(a),Di(s),o=0,u=s.length;o<u;++o)s[o].e=e=!e;for(var c,h,l=a[0];;){for(var f=l,p=!0;f.v;)if((f=f.n)===l)return;c=f.z,i.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(o=0,u=c.length;o<u;++o)i.point((h=c[o])[0],h[1]);else r(f.x,f.n.x,1,i);f=f.n}else{if(p)for(c=f.p.z,o=c.length-1;o>=0;--o)i.point((h=c[o])[0],h[1]);else r(f.x,f.p.x,-1,i);f=f.p}c=(f=f.o).z,p=!p}while(!f.v);i.lineEnd()}}};function Di(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var ji=ti();function Pi(t){return li(t[0])<=ui?t[0]:gi(t[0])*((li(t[0])+ui)%ci-ui)}var Li=function(t,n){var e=Pi(n),r=n[1],i=vi(r),o=[vi(e),-_i(e),0],u=0,a=0;ji.reset(),1===i?r=ai+ii:-1===i&&(r=-ai-ii);for(var s=0,c=t.length;s<c;++s)if(l=(h=t[s]).length)for(var h,l,f=h[l-1],p=Pi(f),_=f[1]/2+si,d=vi(_),y=_i(_),v=0;v<l;++v,p=x,d=w,y=b,f=g){var g=h[v],x=Pi(g),m=g[1]/2+si,w=vi(m),b=_i(m),M=x-p,N=M>=0?1:-1,T=N*M,k=T>ui,A=d*w;if(ji.add(pi(A*N*vi(T),y*b+A*_i(T))),u+=k?M+N*ci:M,k^p>=e^x>=e){var C=Ti(Ni(f),Ni(g));ki(C);var S=Ti(o,C);ki(S);var E=(k^M>=0?-1:1)*bi(S[2]);(r>E||r===E&&(C[0]||C[1]))&&(a+=k^M>=0?1:-1)}}return(u<-ii||u<ii&&ji<-ii)^1&a},Oi=function(t,n,e,r){return function(i){var o,u,a,s=n(i),c=Ci(),h=n(c),l=!1,f={point:p,lineStart:d,lineEnd:y,polygonStart:function(){f.point=g,f.lineStart=x,f.lineEnd=m,u=[],o=[]},polygonEnd:function(){f.point=p,f.lineStart=d,f.lineEnd=y,u=v(u);var t=Li(o,r);u.length?(l||(i.polygonStart(),l=!0),Ui(u,zi,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function _(t,n){s.point(t,n)}function d(){f.point=_,s.lineStart()}function y(){f.point=p,s.lineEnd()}function g(t,n){a.push([t,n]),h.point(t,n)}function x(){h.lineStart(),a=[]}function m(){g(a[0][0],a[0][1]),h.lineEnd();var t,n,e,r,s=h.clean(),f=c.result(),p=f.length;if(a.pop(),o.push(a),a=null,p)if(1&s){if((n=(e=f[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&s&&f.push(f.pop().concat(f.shift())),u.push(f.filter(Ri))}return f}};function Ri(t){return t.length>1}function zi(t,n){return((t=t.x)[0]<0?t[1]-ai-ii:ai-t[1])-((n=n.x)[0]<0?n[1]-ai-ii:ai-n[1])}Oi((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?ui:-ui,s=li(o-e);li(s-ui)<ii?(t.point(e,r=(r+u)/2>0?ai:-ai),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&s>=ui&&(li(e-i)<ii&&(e-=i*ii),li(o-a)<ii&&(o-=a*ii),r=function(t,n,e,r){var i,o,u=vi(t-e);return li(u)>ii?fi((vi(n)*(o=_i(r))*vi(e)-vi(r)*(i=_i(n))*vi(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*ai,r.point(-ui,i),r.point(0,i),r.point(ui,i),r.point(ui,0),r.point(ui,-i),r.point(0,-i),r.point(-ui,-i),r.point(-ui,0),r.point(-ui,i);else if(li(t[0]-n[0])>ii){var o=t[0]<n[0]?ui:-ui;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-ui,-ai]);ti();ti(),ti();function qi(t){this._context=t}qi.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,ci)}},result:Mi};ti();function Fi(){this._string=[]}function Yi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Fi.prototype={_radius:4.5,_circle:Yi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Yi(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Hi(t){return function(n){var e=new Ii;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Ii(){}Ii.prototype={constructor:Ii,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};_i(30*hi);Hi({point:function(t,n){this.stream.point(t*hi,n*hi)}});function $i(t){return function(n,e){var r=_i(n),i=_i(e),o=t(r*i);return[o*i*vi(n),o*vi(e)]}}function Xi(t){return function(n,e){var r=xi(n*n+e*e),i=t(r),o=vi(i),u=_i(i);return[pi(n*o,r*u),bi(r&&e*o/r)]}}var Bi=$i((function(t){return xi(2/(1+t))}));Bi.invert=Xi((function(t){return 2*bi(t/2)}));var Ji=$i((function(t){return(t=wi(t))&&t/vi(t)}));Ji.invert=Xi((function(t){return t}));function Vi(t,n){return[t,yi(mi((ai+n)/2))]}Vi.invert=function(t,n){return[t,2*fi(di(n))-ai]};function Zi(t,n){return[t,n]}Zi.invert=Zi;var Wi=1.340264,Qi=-.081106,Gi=893e-6,Ki=.003796,to=xi(3)/2;function no(t,n){var e=bi(to*vi(n)),r=e*e,i=r*r*r;return[t*_i(e)/(to*(Wi+3*Qi*r+i*(7*Gi+9*Ki*r))),e*(Wi+Qi*r+i*(Gi+Ki*r))]}no.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Wi+Qi*i+o*(Gi+Ki*i))-n)/(Wi+3*Qi*i+o*(7*Gi+9*Ki*i)))*r)*i*i,!(li(e)<oi));++u);return[to*t*(Wi+3*Qi*i+o*(7*Gi+9*Ki*i))/_i(r),bi(vi(r)/to)]};function eo(t,n){var e=_i(n),r=_i(t)*e;return[e*vi(t)/r,vi(n)/r]}eo.invert=Xi(fi);function ro(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}ro.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(li(e)>ii&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};function io(t,n){return[_i(n)*vi(t),vi(n)]}io.invert=Xi(bi);function oo(t,n){var e=_i(n),r=1+_i(t)*e;return[e*vi(t)/r,vi(n)/r]}oo.invert=Xi((function(t){return 2*fi(t)}));function uo(t,n){return[yi(mi((ai+n)/2)),-t]}uo.invert=function(t,n){return[-n,2*fi(di(t))-ai]};function ao(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function so(t,n){var e,r,i,o,u,a=new fo(t),s=+t.value&&(a.value=t.value),c=[a];for(null==n&&(n=co);e=c.pop();)if(s&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)c.push(r=e.children[o]=new fo(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(lo)}function co(t){return t.children}function ho(t){t.data=t.data.data}function lo(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function fo(t){this.data=t,this.depth=this.height=0,this.parent=null}fo.prototype=so.prototype={constructor:fo,count:function(){return this.eachAfter(ao)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return so(this).eachBefore(ho)}};Array.prototype.slice;var po=function(t,n,e,r,i){for(var o,u=t.children,a=-1,s=u.length,c=t.value&&(r-n)/t.value;++a<s;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*c};function _o(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}_o.prototype=Object.create(fo.prototype);var yo=function(t,n,e,r,i){for(var o,u=t.children,a=-1,s=u.length,c=t.value&&(i-e)/t.value;++a<s;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*c},vo=(1+Math.sqrt(5))/2;function go(t,n,e,r,i,o){for(var u,a,s,c,h,l,f,p,_,d,y,v=[],g=n.children,x=0,m=0,w=g.length,b=n.value;x<w;){s=i-e,c=o-r;do{h=g[m++].value}while(!h&&m<w);for(l=f=h,y=h*h*(d=Math.max(c/s,s/c)/(b*t)),_=Math.max(f/y,y/l);m<w;++m){if(h+=a=g[m].value,a<l&&(l=a),a>f&&(f=a),y=h*h*d,(p=Math.max(f/y,y/l))>_){h-=a;break}_=p}v.push(u={value:h,dice:s<c,children:g.slice(x,m)}),u.dice?po(u,e,r,i,b?r+=c*h/b:o):yo(u,e,r,b?e+=s*h/b:i,o),b-=h,x=m}return v}(function t(n){function e(t,e,r,i,o){go(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(vo),function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,s,c,h,l=-1,f=u.length,p=t.value;++l<f;){for(s=(a=u[l]).children,c=a.value=0,h=s.length;c<h;++c)a.value+=s[c].value;a.dice?po(a,e,r,i,r+=(o-r)*a.value/p):yo(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=go(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(vo);var xo=function(){return Math.random()},mo=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(xo),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(xo)),wo=(function t(n){function e(){var t=mo.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(xo),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(xo));(function t(n){function e(t){var e=wo.source(n)(t);return function(){return e()/t}}return e.source=t,e})(xo),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(xo);function bo(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var Mo=Array.prototype,No=Mo.map,To=Mo.slice,ko={name:"implicit"};function Ao(){var t=Object(Ze.a)(),n=[],e=[],r=ko;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==ko)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Object(Ze.a)();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=To.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Ao(n,e).unknown(r)},bo.apply(i,arguments),i}function Co(){var t,n,e=Ao().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,s=0,h=.5;function l(){var e=r().length,l=o[1]<o[0],f=o[l-0],p=o[1-l];t=(p-f)/Math.max(1,e-a+2*s),u&&(t=Math.floor(t)),f+=(p-f-t*(e-a))*h,n=t*(1-a),u&&(f=Math.round(f),n=Math.round(n));var _=c(e).map((function(n){return f+t*n}));return i(l?_.reverse():_)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],l()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,s=+t),l()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),l()):a},e.paddingOuter=function(t){return arguments.length?(s=+t,l()):s},e.align=function(t){return arguments.length?(h=Math.max(0,Math.min(1,t)),l()):h},e.copy=function(){return Co(r(),o).round(u).paddingInner(a).paddingOuter(s).align(h)},bo.apply(l(),arguments)}var So=function(t){return function(){return t}},Eo=function(t){return+t},Uo=[0,1];function Do(t){return t}function jo(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:So(isNaN(n)?NaN:.5)}function Po(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Lo(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=jo(i,r),o=e(u,o)):(r=jo(r,i),o=e(o,u)),function(t){return o(r(t))}}function Oo(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=jo(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=a(t,n,1,r)-1;return o[e](i[e](n))}}function Ro(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function zo(){var t,n,e,r,i,o,u=Uo,a=Uo,s=Zt,c=Do;function h(){return r=Math.min(u.length,a.length)>2?Oo:Lo,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,s)))(t(c(n)))}return l.invert=function(e){return c(n((o||(o=r(a,u.map(t),Ft)))(e)))},l.domain=function(t){return arguments.length?(u=No.call(t,Eo),c===Do||(c=Po(u)),h()):u.slice()},l.range=function(t){return arguments.length?(a=To.call(t),h()):a.slice()},l.rangeRound=function(t){return a=To.call(t),s=Wt,h()},l.clamp=function(t){return arguments.length?(c=t?Po(u):Do,l):c!==Do},l.interpolate=function(t){return arguments.length?(s=t,h()):s},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,h()}}function qo(t,n){return zo()(t,n)}var Fo=function(t,n,e,r){var i,o=d(t,n,e);switch((r=Hr(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Fr(n)/3)))-Fr(Math.abs(t)))}(o,u))||(r.precision=i),Jr(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Fr(n)-Fr(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Fr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Br(r)};function Yo(t){var n=t.domain;return t.ticks=function(t){var e=n();return p(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Fo(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],s=i[u];return s<a&&(r=a,a=s,s=r,r=o,o=u,u=r),(r=_(a,s,e))>0?r=_(a=Math.floor(a/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=_(a=Math.ceil(a*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(s*r)/r,n(i)),t},t}function Ho(){var t=qo(Do,Do);return t.copy=function(){return Ro(t,Ho())},bo.apply(t,arguments),Yo(t)}function Io(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function $o(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Xo(t){return t<0?-t*t:t*t}function Bo(t){var n=t(Do,Do),e=1;function r(){return 1===e?t(Do,Do):.5===e?t($o,Xo):t(Io(e),Io(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},Yo(n)}function Jo(){var t=Bo(zo());return t.copy=function(){return Ro(t,Jo()).exponent(t.exponent())},bo.apply(t,arguments),t}var Vo=new Date,Zo=new Date;function Wo(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Wo((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Vo.setTime(+n),Zo.setTime(+r),t(Vo),t(Zo),Math.floor(e(Vo,Zo))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Qo=Wo((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Qo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Wo((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Go=Qo,Ko=(Qo.range,Wo((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),tu=(Ko.range,6e4),nu=6048e5;function eu(t){return Wo((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*tu)/nu}))}var ru=eu(0),iu=eu(1),ou=eu(2),uu=eu(3),au=eu(4),su=eu(5),cu=eu(6),hu=(ru.range,iu.range,ou.range,uu.range,au.range,su.range,cu.range,Wo((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*tu)/864e5}),(function(t){return t.getDate()-1}))),lu=hu,fu=(hu.range,Wo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*tu)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),pu=(fu.range,Wo((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+n*tu)}),(function(t,n){return(n-t)/tu}),(function(t){return t.getMinutes()}))),_u=(pu.range,Wo((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),du=(_u.range,Wo((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));du.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Wo((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):du:null};du.range;function yu(t){return Wo((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/nu}))}var vu=yu(0),gu=yu(1),xu=yu(2),mu=yu(3),wu=yu(4),bu=yu(5),Mu=yu(6),Nu=(vu.range,gu.range,xu.range,mu.range,wu.range,bu.range,Mu.range,Wo((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Tu=Nu,ku=(Nu.range,Wo((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));ku.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Wo((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Au=ku;ku.range;function Cu(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Su(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Eu(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Uu,Du,ju,Pu,Lu={"-":"",_:" ",0:"0"},Ou=/^\s*\d+/,Ru=/^%/,zu=/[\\^$*+?|[\]().{}]/g;function qu(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Fu(t){return t.replace(zu,"\\$&")}function Yu(t){return new RegExp("^(?:"+t.map(Fu).join("|")+")","i")}function Hu(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Iu(t,n,e){var r=Ou.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function $u(t,n,e){var r=Ou.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Xu(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Bu(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Ju(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Vu(t,n,e){var r=Ou.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Zu(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Wu(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Qu(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Gu(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Ku(t,n,e){var r=Ou.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function ta(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function na(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function ea(t,n,e){var r=Ou.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ra(t,n,e){var r=Ou.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ia(t,n,e){var r=Ou.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function oa(t,n,e){var r=Ru.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function ua(t,n,e){var r=Ou.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function aa(t,n,e){var r=Ou.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function sa(t,n){return qu(t.getDate(),n,2)}function ca(t,n){return qu(t.getHours(),n,2)}function ha(t,n){return qu(t.getHours()%12||12,n,2)}function la(t,n){return qu(1+lu.count(Go(t),t),n,3)}function fa(t,n){return qu(t.getMilliseconds(),n,3)}function pa(t,n){return fa(t,n)+"000"}function _a(t,n){return qu(t.getMonth()+1,n,2)}function da(t,n){return qu(t.getMinutes(),n,2)}function ya(t,n){return qu(t.getSeconds(),n,2)}function va(t){var n=t.getDay();return 0===n?7:n}function ga(t,n){return qu(ru.count(Go(t),t),n,2)}function xa(t,n){var e=t.getDay();return t=e>=4||0===e?au(t):au.ceil(t),qu(au.count(Go(t),t)+(4===Go(t).getDay()),n,2)}function ma(t){return t.getDay()}function wa(t,n){return qu(iu.count(Go(t),t),n,2)}function ba(t,n){return qu(t.getFullYear()%100,n,2)}function Ma(t,n){return qu(t.getFullYear()%1e4,n,4)}function Na(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+qu(n/60|0,"0",2)+qu(n%60,"0",2)}function Ta(t,n){return qu(t.getUTCDate(),n,2)}function ka(t,n){return qu(t.getUTCHours(),n,2)}function Aa(t,n){return qu(t.getUTCHours()%12||12,n,2)}function Ca(t,n){return qu(1+Tu.count(Au(t),t),n,3)}function Sa(t,n){return qu(t.getUTCMilliseconds(),n,3)}function Ea(t,n){return Sa(t,n)+"000"}function Ua(t,n){return qu(t.getUTCMonth()+1,n,2)}function Da(t,n){return qu(t.getUTCMinutes(),n,2)}function ja(t,n){return qu(t.getUTCSeconds(),n,2)}function Pa(t){var n=t.getUTCDay();return 0===n?7:n}function La(t,n){return qu(vu.count(Au(t),t),n,2)}function Oa(t,n){var e=t.getUTCDay();return t=e>=4||0===e?wu(t):wu.ceil(t),qu(wu.count(Au(t),t)+(4===Au(t).getUTCDay()),n,2)}function Ra(t){return t.getUTCDay()}function za(t,n){return qu(gu.count(Au(t),t),n,2)}function qa(t,n){return qu(t.getUTCFullYear()%100,n,2)}function Fa(t,n){return qu(t.getUTCFullYear()%1e4,n,4)}function Ya(){return"+0000"}function Ha(){return"%"}function Ia(t){return+t}function $a(t){return Math.floor(+t/1e3)}!function(t){Uu=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,s=t.shortMonths,c=Yu(i),h=Hu(i),l=Yu(o),f=Hu(o),p=Yu(u),_=Hu(u),d=Yu(a),y=Hu(a),v=Yu(s),g=Hu(s),x={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:sa,e:sa,f:pa,H:ca,I:ha,j:la,L:fa,m:_a,M:da,p:function(t){return i[+(t.getHours()>=12)]},Q:Ia,s:$a,S:ya,u:va,U:ga,V:xa,w:ma,W:wa,x:null,X:null,y:ba,Y:Ma,Z:Na,"%":Ha},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Ta,e:Ta,f:Ea,H:ka,I:Aa,j:Ca,L:Sa,m:Ua,M:Da,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Ia,s:$a,S:ja,u:Pa,U:La,V:Oa,w:Ra,W:za,x:null,X:null,y:qa,Y:Fa,Z:Ya,"%":Ha},w={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=_[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return N(t,n,e,r)},d:Gu,e:Gu,f:ia,H:ta,I:ta,j:Ku,L:ra,m:Qu,M:na,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=h[r[0].toLowerCase()],e+r[0].length):-1},Q:ua,s:aa,S:ea,u:$u,U:Xu,V:Bu,w:Iu,W:Ju,x:function(t,n,r){return N(t,e,n,r)},X:function(t,n,e){return N(t,r,n,e)},y:Zu,Y:Vu,Z:Wu,"%":oa};function b(t,n){return function(e){var r,i,o,u=[],a=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(u.push(t.slice(s,a)),null!=(i=Lu[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),s=a+1);return u.push(t.slice(s,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=Eu(1900);if(N(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Su(Eu(o.y))).getUTCDay(),r=i>4||0===i?gu.ceil(r):gu(r),r=Tu.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Eu(o.y))).getDay(),r=i>4||0===i?iu.ceil(r):iu(r),r=lu.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Su(Eu(o.y)).getUTCDay():n(Eu(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Su(o)):n(o)}}function N(t,n,e,r){for(var i,o,u=0,a=n.length,s=e.length;u<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=w[i in Lu?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return(x.x=b(e,x),x.X=b(r,x),x.c=b(n,x),m.x=b(e,m),m.X=b(r,m),m.c=b(n,m),{format:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Cu);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Su);return n.toString=function(){return t},n}})}(t),Du=Uu.format,Uu.parse,ju=Uu.utcFormat,Pu=Uu.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||ju("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Pu("%Y-%m-%dT%H:%M:%S.%LZ");var Xa=Wo((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Ba=(Xa.range,Wo((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),Ja=(Ba.range,Wo((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*tu)}),(function(t,n){return(n-t)/tu}),(function(t){return t.getUTCMinutes()})));Ja.range;var Va=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Za=Va("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Wa=Va("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Qa=function(t){return function(){return t}},Ga=Math.abs,Ka=Math.atan2,ts=Math.cos,ns=Math.max,es=Math.min,rs=Math.sin,is=Math.sqrt,os=1e-12,us=Math.PI,as=us/2,ss=2*us;function cs(t){return t>=1?as:t<=-1?-as:Math.asin(t)}function hs(t){return t.innerRadius}function ls(t){return t.outerRadius}function fs(t){return t.startAngle}function ps(t){return t.endAngle}function _s(t){return t&&t.padAngle}function ds(t,n,e,r,i,o,u){var a=t-e,s=n-r,c=(u?o:-o)/is(a*a+s*s),h=c*s,l=-c*a,f=t+h,p=n+l,_=e+h,d=r+l,y=(f+_)/2,v=(p+d)/2,g=_-f,x=d-p,m=g*g+x*x,w=i-o,b=f*d-_*p,M=(x<0?-1:1)*is(ns(0,w*w*m-b*b)),N=(b*x-g*M)/m,T=(-b*g-x*M)/m,k=(b*x+g*M)/m,A=(-b*g+x*M)/m,C=N-y,S=T-v,E=k-y,U=A-v;return C*C+S*S>E*E+U*U&&(N=k,T=A),{cx:N,cy:T,x01:-h,y01:-l,x11:N*(i/w-1),y11:T*(i/w-1)}}var ys=function(){var t=hs,n=ls,e=Qa(0),r=null,i=fs,o=ps,u=_s,a=null;function s(){var s,c,h,l=+t.apply(this,arguments),f=+n.apply(this,arguments),p=i.apply(this,arguments)-as,_=o.apply(this,arguments)-as,d=Ga(_-p),y=_>p;if(a||(a=s=Ve()),f<l&&(c=f,f=l,l=c),f>os)if(d>ss-os)a.moveTo(f*ts(p),f*rs(p)),a.arc(0,0,f,p,_,!y),l>os&&(a.moveTo(l*ts(_),l*rs(_)),a.arc(0,0,l,_,p,y));else{var v,g,x=p,m=_,w=p,b=_,M=d,N=d,T=u.apply(this,arguments)/2,k=T>os&&(r?+r.apply(this,arguments):is(l*l+f*f)),A=es(Ga(f-l)/2,+e.apply(this,arguments)),C=A,S=A;if(k>os){var E=cs(k/l*rs(T)),U=cs(k/f*rs(T));(M-=2*E)>os?(w+=E*=y?1:-1,b-=E):(M=0,w=b=(p+_)/2),(N-=2*U)>os?(x+=U*=y?1:-1,m-=U):(N=0,x=m=(p+_)/2)}var D=f*ts(x),j=f*rs(x),P=l*ts(b),L=l*rs(b);if(A>os){var O,R=f*ts(m),z=f*rs(m),q=l*ts(w),F=l*rs(w);if(d<us&&(O=function(t,n,e,r,i,o,u,a){var s=e-t,c=r-n,h=u-i,l=a-o,f=l*s-h*c;if(!(f*f<os))return[t+(f=(h*(n-o)-l*(t-i))/f)*s,n+f*c]}(D,j,q,F,R,z,P,L))){var Y=D-O[0],H=j-O[1],I=R-O[0],$=z-O[1],X=1/rs(((h=(Y*I+H*$)/(is(Y*Y+H*H)*is(I*I+$*$)))>1?0:h<-1?us:Math.acos(h))/2),B=is(O[0]*O[0]+O[1]*O[1]);C=es(A,(l-B)/(X-1)),S=es(A,(f-B)/(X+1))}}N>os?S>os?(v=ds(q,F,D,j,f,S,y),g=ds(R,z,P,L,f,S,y),a.moveTo(v.cx+v.x01,v.cy+v.y01),S<A?a.arc(v.cx,v.cy,S,Ka(v.y01,v.x01),Ka(g.y01,g.x01),!y):(a.arc(v.cx,v.cy,S,Ka(v.y01,v.x01),Ka(v.y11,v.x11),!y),a.arc(0,0,f,Ka(v.cy+v.y11,v.cx+v.x11),Ka(g.cy+g.y11,g.cx+g.x11),!y),a.arc(g.cx,g.cy,S,Ka(g.y11,g.x11),Ka(g.y01,g.x01),!y))):(a.moveTo(D,j),a.arc(0,0,f,x,m,!y)):a.moveTo(D,j),l>os&&M>os?C>os?(v=ds(P,L,R,z,l,-C,y),g=ds(D,j,q,F,l,-C,y),a.lineTo(v.cx+v.x01,v.cy+v.y01),C<A?a.arc(v.cx,v.cy,C,Ka(v.y01,v.x01),Ka(g.y01,g.x01),!y):(a.arc(v.cx,v.cy,C,Ka(v.y01,v.x01),Ka(v.y11,v.x11),!y),a.arc(0,0,l,Ka(v.cy+v.y11,v.cx+v.x11),Ka(g.cy+g.y11,g.cx+g.x11),y),a.arc(g.cx,g.cy,C,Ka(g.y11,g.x11),Ka(g.y01,g.x01),!y))):a.arc(0,0,l,b,w,y):a.lineTo(P,L)}else a.moveTo(0,0);if(a.closePath(),s)return a=null,s+""||null}return s.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-us/2;return[ts(r)*e,rs(r)*e]},s.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Qa(+n),s):t},s.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Qa(+t),s):n},s.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Qa(+t),s):e},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Qa(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Qa(+t),s):i},s.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Qa(+t),s):o},s.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:Qa(+t),s):u},s.context=function(t){return arguments.length?(a=null==t?null:t,s):a},s};function vs(t){this._context=t}vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var gs=function(t){return new vs(t)};ms(gs);function xs(t){this._curve=t}function ms(t){function n(n){return new xs(t(n))}return n._curve=t,n}xs.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var ws=Math.sin(us/10)/Math.sin(7*us/10),bs=(Math.sin(ss/10),Math.cos(ss/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Ms(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Ns(t){this._context=t}Ns.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ms(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ms(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ts(t){this._context=t}Ts.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Ms(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function ks(t){this._context=t}ks.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Ms(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function As(t,n){this._basis=new Ns(t),this._beta=n}As.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,s=-1;++s<=e;)r=s/e,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*u),this._beta*n[s]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Ns(t):new As(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function Cs(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Ss(t,n){this._context=t,this._k=(1-n)/6}Ss.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Cs(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Cs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ss(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Es(t,n){this._context=t,this._k=(1-n)/6}Es.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Cs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Es(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Us(t,n){this._context=t,this._k=(1-n)/6}Us.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Cs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Us(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ds(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>os){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>os){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,h=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*c+t._x1*t._l23_2a-n*t._l12_2a)/h,u=(u*c+t._y1*t._l23_2a-e*t._l12_2a)/h}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function js(t,n){this._context=t,this._alpha=n}js.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ds(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new js(t,n):new Ss(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ps(t,n){this._context=t,this._alpha=n}Ps.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ds(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ps(t,n):new Es(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Ls(t,n){this._context=t,this._alpha=n}Ls.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ds(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Ls(t,n):new Us(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Os(t){this._context=t}Os.prototype={areaStart:bs,areaEnd:bs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Rs(t){return t<0?-1:1}function zs(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Rs(o)+Rs(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function qs(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Fs(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Ys(t){this._context=t}function Hs(t){this._context=new Is(t)}function Is(t){this._context=t}function $s(t){this._context=t}function Xs(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Fs(this,this._t0,qs(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Fs(this,qs(this,e=zs(this,t,n)),e);break;default:Fs(this,this._t0,e=zs(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Hs.prototype=Object.create(Ys.prototype)).point=function(t,n){Ys.prototype.point.call(this,n,t)},Is.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},$s.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Xs(t),i=Xs(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function Bs(t,n){this._context=t,this._t=n}Bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function Js(){this._=null}function Vs(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Zs(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Ws(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Qs(t){for(;t.L;)t=t.L;return t}Js.prototype={constructor:Js,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Qs(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Zs(this,e),e=(t=e).U),e.C=!1,r.C=!0,Ws(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Ws(this,e),e=(t=e).U),e.C=!1,r.C=!0,Zs(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?Qs(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Zs(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Ws(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Zs(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Ws(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Zs(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Ws(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Gs=Js;function Ks(t,n,e,r){var i=[null,null],o=Mc.push(i)-1;return i.left=t,i.right=n,e&&nc(i,t,n,e),r&&nc(i,n,t,r),wc[t.index].halfedges.push(o),wc[n.index].halfedges.push(o),i}function tc(t,n,e){var r=[n,e];return r.left=t,r}function nc(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function ec(t,n,e,r,i){var o,u=t[0],a=t[1],s=u[0],c=u[1],h=0,l=1,f=a[0]-s,p=a[1]-c;if(o=n-s,f||!(o>0)){if(o/=f,f<0){if(o<h)return;o<l&&(l=o)}else if(f>0){if(o>l)return;o>h&&(h=o)}if(o=r-s,f||!(o<0)){if(o/=f,f<0){if(o>l)return;o>h&&(h=o)}else if(f>0){if(o<h)return;o<l&&(l=o)}if(o=e-c,p||!(o>0)){if(o/=p,p<0){if(o<h)return;o<l&&(l=o)}else if(p>0){if(o>l)return;o>h&&(h=o)}if(o=i-c,p||!(o<0)){if(o/=p,p<0){if(o>l)return;o>h&&(h=o)}else if(p>0){if(o<h)return;o<l&&(l=o)}return!(h>0||l<1)||(h>0&&(t[0]=[s+h*f,c+h*p]),l<1&&(t[1]=[s+l*f,c+l*p]),!0)}}}}}function rc(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,s=t[0],c=t.left,h=t.right,l=c[0],f=c[1],p=h[0],_=h[1],d=(l+p)/2,y=(f+_)/2;if(_===f){if(d<n||d>=r)return;if(l>p){if(s){if(s[1]>=i)return}else s=[d,e];o=[d,i]}else{if(s){if(s[1]<e)return}else s=[d,i];o=[d,e]}}else if(a=y-(u=(l-p)/(_-f))*d,u<-1||u>1)if(l>p){if(s){if(s[1]>=i)return}else s=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/u,i];o=[(e-a)/u,e]}else if(f<_){if(s){if(s[0]>=r)return}else s=[n,u*n+a];o=[r,u*r+a]}else{if(s){if(s[0]<n)return}else s=[r,u*r+a];o=[n,u*n+a]}return t[0]=s,t[1]=o,!0}function ic(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function oc(t,n){return n[+(n.left!==t.site)]}function uc(t,n){return n[+(n.left===t.site)]}var ac,sc=[];function cc(){Vs(this),this.x=this.y=this.arc=this.site=this.cy=null}function hc(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],s=r[0]-u,c=r[1]-a,h=o[0]-u,l=o[1]-a,f=2*(s*l-c*h);if(!(f>=-Tc)){var p=s*s+c*c,_=h*h+l*l,d=(l*p-c*_)/f,y=(s*_-h*p)/f,v=sc.pop()||new cc;v.arc=t,v.site=i,v.x=d+u,v.y=(v.cy=y+a)+Math.sqrt(d*d+y*y),t.circle=v;for(var g=null,x=bc._;x;)if(v.y<x.y||v.y===x.y&&v.x<=x.x){if(!x.L){g=x.P;break}x=x.L}else{if(!x.R){g=x;break}x=x.R}bc.insert(g,v),g||(ac=v)}}}}function lc(t){var n=t.circle;n&&(n.P||(ac=n.N),bc.remove(n),sc.push(n),Vs(n),t.circle=null)}var fc=[];function pc(){Vs(this),this.edge=this.site=this.circle=null}function _c(t){var n=fc.pop()||new pc;return n.site=t,n}function dc(t){lc(t),mc.remove(t),fc.push(t),Vs(t)}function yc(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];dc(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Nc&&Math.abs(r-s.circle.cy)<Nc;)o=s.P,a.unshift(s),dc(s),s=o;a.unshift(s),lc(s);for(var c=u;c.circle&&Math.abs(e-c.circle.x)<Nc&&Math.abs(r-c.circle.cy)<Nc;)u=c.N,a.push(c),dc(c),c=u;a.push(c),lc(c);var h,l=a.length;for(h=1;h<l;++h)c=a[h],s=a[h-1],nc(c.edge,s.site,c.site,i);s=a[0],(c=a[l-1]).edge=Ks(s.site,c.site,null,i),hc(s),hc(c)}function vc(t){for(var n,e,r,i,o=t[0],u=t[1],a=mc._;a;)if((r=gc(a,u)-o)>Nc)a=a.L;else{if(!((i=o-xc(a,u))>Nc)){r>-Nc?(n=a.P,e=a):i>-Nc?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){wc[t.index]={site:t,halfedges:[]}}(t);var s=_c(t);if(mc.insert(n,s),n||e){if(n===e)return lc(n),e=_c(n.site),mc.insert(s,e),s.edge=e.edge=Ks(n.site,s.site),hc(n),void hc(e);if(e){lc(n),lc(e);var c=n.site,h=c[0],l=c[1],f=t[0]-h,p=t[1]-l,_=e.site,d=_[0]-h,y=_[1]-l,v=2*(f*y-p*d),g=f*f+p*p,x=d*d+y*y,m=[(y*g-p*x)/v+h,(f*x-d*g)/v+l];nc(e.edge,c,_,m),s.edge=Ks(c,t,null,m),e.edge=Ks(t,_,null,m),hc(n),hc(e)}else s.edge=Ks(n.site,s.site)}}function gc(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],s=e[1],c=s-n;if(!c)return a;var h=a-r,l=1/o-1/c,f=h/c;return l?(-f+Math.sqrt(f*f-2*l*(h*h/(-2*c)-s+c/2+i-o/2)))/l+r:(r+a)/2}function xc(t,n){var e=t.N;if(e)return gc(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var mc,wc,bc,Mc,Nc=1e-6,Tc=1e-12;function kc(t,n){return n[1]-t[1]||n[0]-t[0]}function Ac(t,n){var e,r,i,o=t.sort(kc).pop();for(Mc=[],wc=new Array(t.length),mc=new Gs,bc=new Gs;;)if(i=ac,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(vc(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;yc(i.arc)}if(function(){for(var t,n,e,r,i=0,o=wc.length;i<o;++i)if((t=wc[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=ic(t,Mc[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,o=Mc.length;o--;)rc(i=Mc[o],t,n,e,r)&&ec(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Nc||Math.abs(i[0][1]-i[1][1])>Nc)||delete Mc[o]}(u,a,s,c),function(t,n,e,r){var i,o,u,a,s,c,h,l,f,p,_,d,y=wc.length,v=!0;for(i=0;i<y;++i)if(o=wc[i]){for(u=o.site,a=(s=o.halfedges).length;a--;)Mc[s[a]]||s.splice(a,1);for(a=0,c=s.length;a<c;)_=(p=uc(o,Mc[s[a]]))[0],d=p[1],l=(h=oc(o,Mc[s[++a%c]]))[0],f=h[1],(Math.abs(_-l)>Nc||Math.abs(d-f)>Nc)&&(s.splice(a,0,Mc.push(tc(u,p,Math.abs(_-t)<Nc&&r-d>Nc?[t,Math.abs(l-t)<Nc?f:r]:Math.abs(d-r)<Nc&&e-_>Nc?[Math.abs(f-r)<Nc?l:e,r]:Math.abs(_-e)<Nc&&d-n>Nc?[e,Math.abs(l-e)<Nc?f:n]:Math.abs(d-n)<Nc&&_-t>Nc?[Math.abs(f-n)<Nc?l:t,n]:null))-1),++c);c&&(v=!1)}if(v){var g,x,m,w=1/0;for(i=0,v=null;i<y;++i)(o=wc[i])&&(m=(g=(u=o.site)[0]-t)*g+(x=u[1]-n)*x)<w&&(w=m,v=o);if(v){var b=[t,n],M=[t,r],N=[e,r],T=[e,n];v.halfedges.push(Mc.push(tc(u=v.site,b,M))-1,Mc.push(tc(u,M,N))-1,Mc.push(tc(u,N,T))-1,Mc.push(tc(u,T,b))-1)}}for(i=0;i<y;++i)(o=wc[i])&&(o.halfedges.length||delete wc[i])}(u,a,s,c)}this.edges=Mc,this.cells=wc,mc=bc=Mc=wc=null}Ac.prototype={constructor:Ac,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return oc(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,s,c,h=e.site,l=-1,f=n[i[o-1]],p=f.left===h?f.right:f.left;++l<o;)u=p,p=(f=n[i[l]]).left===h?f.right:f.left,u&&p&&r<u.index&&r<p.index&&(s=u,c=p,((a=h)[0]-c[0])*(s[1]-a[1])-(a[0]-s[0])*(c[1]-a[1])<0)&&t.push([h.data,u.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var s=t-i.site[0],c=n-i.site[1],h=s*s+c*c;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],c=n-a[1],l=s*s+c*c;l<h&&(h=l,u=a.index)}}))}while(null!==u);return o._found=r,null==e||h<=e*e?i.site:null}};function Cc(t,n,e){this.k=t,this.x=n,this.y=e}Cc.prototype={constructor:Cc,scale:function(t){return 1===t?this:new Cc(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Cc(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Cc(1,0,0);Cc.prototype;e.d(n,"n",(function(){return y})),e.d(n,"o",(function(){return g})),e.d(n,"d",(function(){return D})),e.d(n,"b",(function(){return j})),e.d(n,"c",(function(){return P})),e.d(n,"p",(function(){return mt})),e.d(n,"e",(function(){return K})),e.d(n,"g",(function(){return _r})),e.d(n,"h",(function(){return Ar})),e.d(n,"i",(function(){return Er})),e.d(n,"j",(function(){return Or})),e.d(n,"k",(function(){return Lr})),e.d(n,"l",(function(){return Rr})),e.d(n,"m",(function(){return zr})),e.d(n,"q",(function(){return Co})),e.d(n,"r",(function(){return Ho})),e.d(n,"s",(function(){return Ao})),e.d(n,"t",(function(){return Jo})),e.d(n,"u",(function(){return Za})),e.d(n,"v",(function(){return Wa})),e.d(n,"w",(function(){return H.f})),e.d(n,"f",(function(){return H.b})),e.d(n,"a",(function(){return ys})),e.d(n,"x",(function(){return Du}))},5:function(t,n,e){"use strict";e.d(n,"g",(function(){return i})),e.d(n,"c",(function(){return o})),e.d(n,"a",(function(){return u})),e.d(n,"b",(function(){return a})),e.d(n,"e",(function(){return c})),e.d(n,"d",(function(){return h})),e.d(n,"f",(function(){return l}));var r=e(2);function i(t,n){return 1===n?t[1]:2===n?t[2]:t.many}function o(t,n){return{x:Math.cos(t)*n,y:Math.sin(t)*n,angle:t,r:n}}function u(t,n){return t/n}var a=function(){function t(t,n){this.x=t,this.y=n}return t.prototype.Dist=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},t.prototype.ToRad=function(t){var n=this.Dist(t),e=Math.atan2(t.y-this.y,t.x-this.x);return new s(e,n)},t}(),s=function(){function t(t,n){this.th=t,this.r=n}return t.prototype.ToCart=function(){return new a(Math.cos(this.th)*this.r,Math.sin(this.th)*this.r)},t}();function c(){r.w("svg").selectAll("*").remove()}function h(t,n,e){var r=document.createElement("button");r.setAttribute("class","btn line-btn");var i=document.createElement("span");i.innerHTML=n,r.appendChild(i),document.querySelector(t).append(r)}function l(t){var n=document.querySelector("#svg-port").getBoundingClientRect();return[n.width,n.height]}},58:function(t,n,e){"use strict";e.r(n);var r=e(8),i=e(5),o=!0,u=!0,a=!1,s={},c={};function h(){o=!o,d3.select("svg").selectAll("*").remove(),$.post("research-mapData",{},(function(t){0,0,y(p(t),_(DOMAINS))}))}function l(){(u=!u)?($(".whiskers").show(),$(".disciplineTitles").show()):($(".whiskers").hide(),$(".disciplineTitles").hide())}function f(){a=!a;var t,n,e,r=jsStrings.tsv_footer+"\r\n"+jsStrings.journal_name+"\t"+jsStrings.discipline+"\t"+jsStrings.domain1+"\t"+jsStrings.domain2+"\r\n";for(var i in c)c.hasOwnProperty(i)&&(r+=c[i]+"\t"+JOURNALS[i].disciplines[0].name+"\t"+JOURNALS[i].domains[0].name+"\t"+(JOURNALS[i].domains.length>1?JOURNALS[i].domains[1].name:"-")+"\r\n");for(var i in r+=jsStrings.missing_journal_name+"\r\n",s)s.hasOwnProperty(i)&&(r+=i+"\r\n");a?(t="journals.tsv",n=r,(e=document.createElement("a")).setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(n)),e.setAttribute("download",t),e.style.display="none",document.body.appendChild(e),e.click(),document.body.removeChild(e)):$("#missingTitles").remove()}function p(t){var n={};return t.forEach((function(t){"article"===t.publicationType&&0,void 0!==t.journalTitle&&"article"===t.publicationType&&void 0===JOURNALS[t.compJournalTitle]&&(s[t.journalTitle]=s[t.journalTitle]?s[t.journalTitle]++:1,0),void 0!==t.journalTitle&&"article"===t.publicationType&&void 0!==JOURNALS[t.compJournalTitle]&&(c[t.compJournalTitle]=t.journalTitle)})),t.filter((function(t){return"article"===t.publicationType&&void 0!==t.journalTitle&&void 0!==JOURNALS[t.compJournalTitle]})).forEach((function(t){n[t.compJournalTitle]?n[t.compJournalTitle].amount++:(t.domains=JOURNALS[t.compJournalTitle].domains,t.discipline=JOURNALS[t.compJournalTitle].disciplines[0].name,DOMAINS.forEach((function(n){n.topic===t.domains[0].name&&(t.domains[0].hue=n.hue,n.amount+=1)})),t.amount=1,t.index=0,n[t.compJournalTitle]=t)})),Object.keys(n).map((function(t){return n[t]}))}function _(t){var n=0;return t.map((function(t){var e={begin:n,end:n+2*t.weight*Math.PI};return n+=2*t.weight*Math.PI,{angleBounds:e,topic:t.topic,hue:t.hue}}))}function d(t,n){return t.map((t,e)=>t+n[e])}function y(t,n){var e=d3.select("#svg-port");const[i,o]=getDimensions("#svg-port");var u=o/2.5,a=i/1.6,s=o/2;const c=Array.from(new Set(t.reduce((t,n)=>t.concat(n.authors),[]))),h=c.map(n=>t.filter(t=>t.authors.includes(n)).reduce((t,n)=>t.concat([n]),[])),l=[.1,.04,.01],f=h.map((t,e)=>{autDoms={},DOMAINS.forEach(t=>autDoms[t.topic]=0),t.forEach(t=>{t.domains.map(t=>t.name).filter(t=>void 0!==autDoms[t]).forEach((t,n)=>{autDoms[t]=function(t,n){return t+n-t*n}(autDoms[t],l[n])})});var r=function(t,n){var e=t.map((function(t){return{centre:(t.angleBounds.begin+t.angleBounds.end)/2-Math.PI/4,topic:t.topic}})),r={};return e.forEach((function(t){r[t.topic]=PolarToCartesian(t.centre,3*n/4)})),r}(n,u);Object.keys(r).forEach(t=>{newCoords=PolarToCartesian(r[t].angle-Math.PI/4,u),r[t]=newCoords}),v=Object.keys(autDoms).map(t=>[r[t].x*autDoms[t],r[t].y*autDoms[t]]).reduce(d,[0,0]);let i="",o=0;return Object.keys(autDoms).forEach(t=>{autDoms[t]>=o&&(i=t,o=autDoms[t])}),{x:v[0],y:v[1],maxTopic:i,authorName:c[e]}});var p=d3.tip().attr("class","d3-tip").html((function(t){return t.authorName}));e.call(p);e.append("g").attr("class","nodes").selectAll("circle").data(f).enter().append("circle").attr("r",(function(t){return 7})).attr("fill",(function(t){return"#999999"})).attr("stroke","#434343").attr("stroke-width","1px").attr("cx",(function(t,n){return t.x})).attr("cy",(function(t,n){return t.y})).attr("transform","translate("+a+" , "+s+")").on("mouseover",p.show).on("mouseout",p.hide);var _=d3.arc().innerRadius(u-30).outerRadius(u).startAngle((function(t){return t.angleBounds.begin})).endAngle((function(t){return t.angleBounds.end})),y=e.append("g").attr("id","arcs-g");n.forEach((function(t){y.append("path").attr("d",_(t)).attr("id",t.topic).attr("transform","translate("+a+" , "+s+")").attr("fill",(function(){return t.hue}))})),Object(r.b)(e,i,o,jsStrings)}$(document).ready((function(){const t=(t,n)=>Object(i.d)("#btn-container",t,n);t(strings.averaging_method,h),t(strings.show_disciplines,l),t(strings.show_missing_journals,f),$.post("research-mapData",{},(function(t){y(p(t,DOMAINS),_(DOMAINS)),l()}))})),$.get("/getAllWorks",(function(t){t}))},7:function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));const r=[{topic:"Dziedzina nauk humanistycznych",weight:.125,hue:"#868686",amount:0},{topic:"Dziedzina nauk teologicznych",weight:.125,hue:"#05a7b8",amount:0},{topic:"Dziedzina nauk społecznych",weight:.125,hue:"#1D1DBB",amount:0},{topic:"Dziedzina nauk medycznych i o zdrowiu",weight:.125,hue:"#D81D1D",amount:0},{topic:"Dziedzina nauk inżynieryjnych i technicznych",weight:.125,hue:"#E92DCC",amount:0},{topic:"Dziedzina nauk ścisłych i przyrodniczych",weight:.125,hue:"#6EE9C4",amount:0},{topic:"Dziedzina nauk rolniczych",weight:.125,hue:"#39B918",amount:0},{topic:"Dziedzina sztuki",weight:.125,hue:"#F8CE1A",amount:0}]},8:function(t,n,e){"use strict";e.d(n,"g",(function(){return i})),e.d(n,"i",(function(){return p})),e.d(n,"h",(function(){return _})),e.d(n,"e",(function(){return y})),e.d(n,"c",(function(){return v})),e.d(n,"f",(function(){return g})),e.d(n,"d",(function(){return x})),e.d(n,"a",(function(){return m})),e.d(n,"b",(function(){return w}));var r,i,o,u=e(7),a=e(5),s=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),c=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new e((function(n){n(t.value)})).then(u,a)}s((r=r.apply(t,n||[])).next())}))},h=function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},l=function(t){var n="function"==typeof Symbol&&t[Symbol.iterator],e=0;return n?n.call(t):{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}}},f=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u};!function(t){t.Article="article",t.Book="book"}(i||(i={})),function(t){t.Polish="POL",t.English="ENG"}(o||(o={}));var p=function(){},_=function(){};(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}s(n,t)})(p),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}s(n,t)}(p);function d(t){return c(this,void 0,void 0,(function(){var n;return h(this,(function(e){switch(e.label){case 0:return[4,fetch(t)];case 1:if(200!==(n=e.sent()).status)throw new URIError(t+" responded with non 200 code: "+n.status);return[4,n.json()];case 2:return[2,e.sent()]}}))}))}function y(){return c(this,void 0,void 0,(function(){return h(this,(function(t){return[2,d("/scriptableStrings")]}))}))}function v(){return c(this,void 0,void 0,(function(){return h(this,(function(t){return[2,d("/data/works")]}))}))}function g(t){return c(this,void 0,void 0,(function(){var n,e;return h(this,(function(r){switch(r.label){case 0:return[4,v()];case 1:return n=r.sent(),[4,y()];case 2:return e=r.sent(),[2,t(n,e)]}}))}))}function x(t){return c(this,void 0,void 0,(function(){return h(this,(function(n){return[2,d("/data/department/"+t)]}))}))}function m(t,n){var e,r,i,o,u=new Map;try{for(var a=l(t),s=a.next();!s.done;s=a.next()){var c=s.value;try{for(var h=l(c.authors),p=h.next();!p.done;p=h.next()){var d=p.value;u.has(d)||u.set(d,0),u.set(d,u.get(d)+1)}}catch(t){i={error:t}}finally{try{p&&!p.done&&(o=h.return)&&o.call(h)}finally{if(i)throw i.error}}}}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=a.return)&&r.call(a)}finally{if(e)throw e.error}}return Array.from(u).filter((function(t){var n=f(t,2),e=n[0];n[1];return!e.includes("#")})).map((function(t){var e=f(t,2),r=e[0],i=e[1],o=new _;return o.department=n,o.name=r,o.worksAmount=i,o}))}function w(t,n,e,r){var i=t.append("g").attr("id","mapkey").attr("z-index",100).selectAll("text").data(u.a).enter().append("g").attr("id",(function(t,n){return"mapkey-domain-"+n}));i.append("text").attr("x",30).attr("y",(function(t,n){return e-20*(n+1)+10})).text((function(t){return r.vis.domains[t.topic]}));var o=f(Object(a.f)("#mapkey"),2),s=(o[0],o[1]);t.select("#mapkey").append("text").attr("x",10).attr("y",e-s-10).text(r.vis.map_key+":"),i.append("circle").attr("cx",20).attr("cy",(function(t,n){return e-20*(n+1)+10-3-2})).attr("r",6).attr("fill",(function(t){return t.hue}))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,